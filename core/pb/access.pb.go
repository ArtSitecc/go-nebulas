// Code generated by protoc-gen-gogo.
// source: access.proto
// DO NOT EDIT!

/*
	Package corepb is a generated protocol buffer package.

	It is generated from these files:
		access.proto

	It has these top-level messages:
		Access
		Whitelist
		Blacklist
		Contract
*/
package corepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Access struct {
	// WhiteList of transactions, some of which are accepted only when conditions permit
	Whitelist *Whitelist `protobuf:"bytes,1,opt,name=whitelist" json:"whitelist,omitempty"`
	// Blacklists of transactions, some of which are not accepted on the blacklists
	Blacklist *Blacklist `protobuf:"bytes,2,opt,name=blacklist" json:"blacklist,omitempty"`
}

func (m *Access) Reset()                    { *m = Access{} }
func (m *Access) String() string            { return proto.CompactTextString(m) }
func (*Access) ProtoMessage()               {}
func (*Access) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{0} }

func (m *Access) GetWhitelist() *Whitelist {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

func (m *Access) GetBlacklist() *Blacklist {
	if m != nil {
		return m.Blacklist
	}
	return nil
}

type Whitelist struct {
	// TODO(larry): later may change
	NbrePublisher []string `protobuf:"bytes,1,rep,name=nbre_publisher,json=nbrePublisher" json:"nbre_publisher,omitempty"`
}

func (m *Whitelist) Reset()                    { *m = Whitelist{} }
func (m *Whitelist) String() string            { return proto.CompactTextString(m) }
func (*Whitelist) ProtoMessage()               {}
func (*Whitelist) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{1} }

func (m *Whitelist) GetNbrePublisher() []string {
	if m != nil {
		return m.NbrePublisher
	}
	return nil
}

type Blacklist struct {
	// Hex string of the transaction's from address.
	From []string `protobuf:"bytes,1,rep,name=from" json:"from,omitempty"`
	// Hex string of the transaction's to address.
	To []string `protobuf:"bytes,2,rep,name=to" json:"to,omitempty"`
	// contract access data
	Contracts []*Contract `protobuf:"bytes,3,rep,name=contracts" json:"contracts,omitempty"`
}

func (m *Blacklist) Reset()                    { *m = Blacklist{} }
func (m *Blacklist) String() string            { return proto.CompactTextString(m) }
func (*Blacklist) ProtoMessage()               {}
func (*Blacklist) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{2} }

func (m *Blacklist) GetFrom() []string {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Blacklist) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Blacklist) GetContracts() []*Contract {
	if m != nil {
		return m.Contracts
	}
	return nil
}

type Contract struct {
	// Hex string of the call type transaction's to address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// slice of call type transaction's function string.
	Functions []string `protobuf:"bytes,2,rep,name=functions" json:"functions,omitempty"`
	// slice of deploy type transaction's data keyword.
	Keywords []string `protobuf:"bytes,3,rep,name=keywords" json:"keywords,omitempty"`
}

func (m *Contract) Reset()                    { *m = Contract{} }
func (m *Contract) String() string            { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()               {}
func (*Contract) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{3} }

func (m *Contract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Contract) GetFunctions() []string {
	if m != nil {
		return m.Functions
	}
	return nil
}

func (m *Contract) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func init() {
	proto.RegisterType((*Access)(nil), "corepb.Access")
	proto.RegisterType((*Whitelist)(nil), "corepb.Whitelist")
	proto.RegisterType((*Blacklist)(nil), "corepb.Blacklist")
	proto.RegisterType((*Contract)(nil), "corepb.Contract")
}
func (m *Access) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Access) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Whitelist != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Whitelist.Size()))
		n1, err := m.Whitelist.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Blacklist != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Blacklist.Size()))
		n2, err := m.Blacklist.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Whitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Whitelist) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NbrePublisher) > 0 {
		for _, s := range m.NbrePublisher {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Blacklist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blacklist) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		for _, s := range m.From {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Contracts) > 0 {
		for _, msg := range m.Contracts {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAccess(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Functions) > 0 {
		for _, s := range m.Functions {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Access(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Access(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAccess(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Access) Size() (n int) {
	var l int
	_ = l
	if m.Whitelist != nil {
		l = m.Whitelist.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Blacklist != nil {
		l = m.Blacklist.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *Whitelist) Size() (n int) {
	var l int
	_ = l
	if len(m.NbrePublisher) > 0 {
		for _, s := range m.NbrePublisher {
			l = len(s)
			n += 1 + l + sovAccess(uint64(l))
		}
	}
	return n
}

func (m *Blacklist) Size() (n int) {
	var l int
	_ = l
	if len(m.From) > 0 {
		for _, s := range m.From {
			l = len(s)
			n += 1 + l + sovAccess(uint64(l))
		}
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovAccess(uint64(l))
		}
	}
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovAccess(uint64(l))
		}
	}
	return n
}

func (m *Contract) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	if len(m.Functions) > 0 {
		for _, s := range m.Functions {
			l = len(s)
			n += 1 + l + sovAccess(uint64(l))
		}
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 1 + l + sovAccess(uint64(l))
		}
	}
	return n
}

func sovAccess(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAccess(x uint64) (n int) {
	return sovAccess(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Access) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Access: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Access: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Whitelist == nil {
				m.Whitelist = &Whitelist{}
			}
			if err := m.Whitelist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blacklist == nil {
				m.Blacklist = &Blacklist{}
			}
			if err := m.Blacklist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Whitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Whitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Whitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrePublisher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NbrePublisher = append(m.NbrePublisher, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blacklist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blacklist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blacklist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, &Contract{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Functions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Functions = append(m.Functions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccess(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAccess
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAccess
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAccess(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAccess = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccess   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("access.proto", fileDescriptorAccess) }

var fileDescriptorAccess = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x4d, 0x2b, 0x75, 0x39, 0xd3, 0x31, 0xcf, 0x55, 0x11, 0x29, 0xa5, 0x20, 0xf4, 0xaa,
	0x42, 0x7d, 0x02, 0xe7, 0x0b, 0x48, 0x6e, 0xbc, 0x73, 0xb4, 0x69, 0xc6, 0xea, 0x6a, 0x53, 0x92,
	0x8c, 0xe1, 0x5b, 0xf8, 0x58, 0x5e, 0xfa, 0x08, 0x52, 0x5f, 0x44, 0x96, 0x35, 0x2d, 0xde, 0xe5,
	0x7c, 0xe7, 0xfb, 0xcf, 0x09, 0x09, 0x5c, 0x16, 0x9c, 0x0b, 0xad, 0xb3, 0x4e, 0x49, 0x23, 0x31,
	0xe0, 0x52, 0x89, 0xae, 0x4c, 0xde, 0x20, 0x78, 0xb4, 0x1c, 0xef, 0x81, 0x1e, 0xb6, 0xb5, 0x11,
	0x4d, 0xad, 0x4d, 0x48, 0x62, 0x92, 0xce, 0xf3, 0xeb, 0xec, 0x64, 0x65, 0x2f, 0xae, 0xc1, 0x26,
	0xe7, 0x18, 0x28, 0x9b, 0x82, 0xef, 0x6c, 0xc0, 0xfb, 0x1f, 0x58, 0xb9, 0x06, 0x9b, 0x9c, 0x24,
	0x07, 0x3a, 0x0e, 0xc2, 0x3b, 0x58, 0xb4, 0xa5, 0x12, 0xeb, 0x6e, 0x5f, 0x36, 0xb5, 0xde, 0x0a,
	0x15, 0x92, 0xd8, 0x4f, 0x29, 0xbb, 0x3a, 0xd2, 0x67, 0x07, 0x93, 0x35, 0xd0, 0x71, 0x16, 0x22,
	0x9c, 0x6f, 0x94, 0x7c, 0x1f, 0x4c, 0x7b, 0xc6, 0x05, 0x78, 0x46, 0x86, 0x9e, 0x25, 0x9e, 0x91,
	0x98, 0x01, 0xe5, 0xb2, 0x35, 0xaa, 0xe0, 0x46, 0x87, 0x7e, 0xec, 0xa7, 0xf3, 0x7c, 0xe9, 0x6e,
	0xf5, 0x34, 0x34, 0xd8, 0xa4, 0x24, 0xaf, 0x30, 0x73, 0x18, 0x43, 0xb8, 0x28, 0xaa, 0x4a, 0x09,
	0xad, 0xed, 0x03, 0x50, 0xe6, 0x4a, 0xbc, 0x05, 0xba, 0xd9, 0xb7, 0xdc, 0xd4, 0xb2, 0xd5, 0xc3,
	0xb2, 0x09, 0xe0, 0x0d, 0xcc, 0x76, 0xe2, 0xe3, 0x20, 0x55, 0x75, 0x5a, 0x49, 0xd9, 0x58, 0xaf,
	0x96, 0x5f, 0x7d, 0x44, 0xbe, 0xfb, 0x88, 0xfc, 0xf4, 0x11, 0xf9, 0xfc, 0x8d, 0xce, 0xca, 0xc0,
	0xfe, 0xc0, 0xc3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x2c, 0x1e, 0x5c, 0x91, 0x01, 0x00,
	0x00,
}
