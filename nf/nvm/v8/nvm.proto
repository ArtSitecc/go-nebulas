// Copyright (C) 2017 go-nebulas authors
//
// This file is part of the go-nebulas library.
//
// the go-nebulas library is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// the go-nebulas library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with the go-nebulas library.  If not, see <http://www.gnu.org/licenses/>.
//

syntax = "proto3";


service NVMService{
    rpc SmartContractCall(stream NVMDataRequest) returns (stream NVMDataResponse) {}
}

message NVMConfigBundle{
    string script_src = 1;
    string script_type = 2;
    string runnable_src = 3;
    string block_json = 4;
    string tx_json = 5;
    string module_id = 6;
    uint64 block_height = 7;
    uint32 chain_id = 8;

    bool   enable_limits = 9;
    uint64 limits_exe_instruction = 10;
    uint64 limits_total_mem_size = 11;
    uint64 execution_timeout = 12;
    uint64 timeout_gas_limit_cost = 13;
    uint64 max_limits_of_execution_instruction = 14;
    uint64 default_limits_of_total_mem_size = 15;
}

message NVMCallbackResult{
    string func_name = 1;       // callback function name
    string result = 2;          // execution result code
    bool not_null = 3;          // indicator whether the result is null or just empty string 
    repeated string extra = 4;  // more results
}

message NVMDataRequest{
    string request_type = 1;  // start or callback
    uint32 request_indx = 2;  // stream objects index
    uint64 lcs_handler = 3;   // local engine index
    uint64 gcs_handler = 4;   // global engine index, not used at this moment
   
    NVMCallbackResult callback_result = 5;     // callback execution result got from client
    NVMConfigBundle config_bundle = 6;
}

// server side response
message NVMStatsBundle{
    uint64 actual_count_of_execution_instruction = 1;
    uint64 actual_used_mem_size = 2;
}

message NVMFinalResponse{
    int32 result = 1;
    string msg = 2;
    bool not_null = 3;
    NVMStatsBundle stats_bundle = 4;
}

message NVMCallbackResponse{
    string func_name = 1;
    repeated string func_params = 2;
}

message NVMDataResponse {
    string response_type = 1;   // callback, final
    uint32 response_indx = 2;
    uint64 lcs_handler = 3;     // engine index
    uint64 gcs_handler = 4;     // global engine index, not used at this moment
    NVMFinalResponse final_response = 5;
    NVMCallbackResponse callback_response = 6; 
}
