// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nvm.proto
// Original file comments:
// Copyright (C) 2017 go-nebulas authors
//
// This file is part of the go-nebulas library.
//
// the go-nebulas library is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// the go-nebulas library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with the go-nebulas library.  If not, see <http://www.gnu.org/licenses/>.
//
//
#ifndef GRPC_nvm_2eproto__INCLUDED
#define GRPC_nvm_2eproto__INCLUDED

#include "nvm.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace nvm {

class NVMService final {
 public:
  static constexpr char const* service_full_name() {
    return "nvm.NVMService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DeploySmartContract(::grpc::ClientContext* context, const ::nvm::NVMDeployRequest& request, ::nvm::NVMResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvm::NVMResponse>> AsyncDeploySmartContract(::grpc::ClientContext* context, const ::nvm::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvm::NVMResponse>>(AsyncDeploySmartContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvm::NVMResponse>> PrepareAsyncDeploySmartContract(::grpc::ClientContext* context, const ::nvm::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvm::NVMResponse>>(PrepareAsyncDeploySmartContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::nvm::NVMDataRequest, ::nvm::NVMResponse>> NVMDataExchange(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::nvm::NVMDataRequest, ::nvm::NVMResponse>>(NVMDataExchangeRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nvm::NVMDataRequest, ::nvm::NVMResponse>> AsyncNVMDataExchange(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nvm::NVMDataRequest, ::nvm::NVMResponse>>(AsyncNVMDataExchangeRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nvm::NVMDataRequest, ::nvm::NVMResponse>> PrepareAsyncNVMDataExchange(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nvm::NVMDataRequest, ::nvm::NVMResponse>>(PrepareAsyncNVMDataExchangeRaw(context, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvm::NVMResponse>* AsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::nvm::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvm::NVMResponse>* PrepareAsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::nvm::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::nvm::NVMDataRequest, ::nvm::NVMResponse>* NVMDataExchangeRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::nvm::NVMDataRequest, ::nvm::NVMResponse>* AsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::nvm::NVMDataRequest, ::nvm::NVMResponse>* PrepareAsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DeploySmartContract(::grpc::ClientContext* context, const ::nvm::NVMDeployRequest& request, ::nvm::NVMResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvm::NVMResponse>> AsyncDeploySmartContract(::grpc::ClientContext* context, const ::nvm::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvm::NVMResponse>>(AsyncDeploySmartContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvm::NVMResponse>> PrepareAsyncDeploySmartContract(::grpc::ClientContext* context, const ::nvm::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvm::NVMResponse>>(PrepareAsyncDeploySmartContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::nvm::NVMDataRequest, ::nvm::NVMResponse>> NVMDataExchange(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::nvm::NVMDataRequest, ::nvm::NVMResponse>>(NVMDataExchangeRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::nvm::NVMDataRequest, ::nvm::NVMResponse>> AsyncNVMDataExchange(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::nvm::NVMDataRequest, ::nvm::NVMResponse>>(AsyncNVMDataExchangeRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::nvm::NVMDataRequest, ::nvm::NVMResponse>> PrepareAsyncNVMDataExchange(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::nvm::NVMDataRequest, ::nvm::NVMResponse>>(PrepareAsyncNVMDataExchangeRaw(context, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::nvm::NVMResponse>* AsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::nvm::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nvm::NVMResponse>* PrepareAsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::nvm::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::nvm::NVMDataRequest, ::nvm::NVMResponse>* NVMDataExchangeRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::nvm::NVMDataRequest, ::nvm::NVMResponse>* AsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::nvm::NVMDataRequest, ::nvm::NVMResponse>* PrepareAsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DeploySmartContract_;
    const ::grpc::internal::RpcMethod rpcmethod_NVMDataExchange_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DeploySmartContract(::grpc::ServerContext* context, const ::nvm::NVMDeployRequest* request, ::nvm::NVMResponse* response);
    virtual ::grpc::Status NVMDataExchange(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::nvm::NVMResponse, ::nvm::NVMDataRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_DeploySmartContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeploySmartContract() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DeploySmartContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeploySmartContract(::grpc::ServerContext* context, const ::nvm::NVMDeployRequest* request, ::nvm::NVMResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeploySmartContract(::grpc::ServerContext* context, ::nvm::NVMDeployRequest* request, ::grpc::ServerAsyncResponseWriter< ::nvm::NVMResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NVMDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NVMDataExchange() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NVMDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMDataExchange(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::nvm::NVMResponse, ::nvm::NVMDataRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMDataExchange(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::nvm::NVMResponse, ::nvm::NVMDataRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DeploySmartContract<WithAsyncMethod_NVMDataExchange<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_DeploySmartContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeploySmartContract() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DeploySmartContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeploySmartContract(::grpc::ServerContext* context, const ::nvm::NVMDeployRequest* request, ::nvm::NVMResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NVMDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NVMDataExchange() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NVMDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMDataExchange(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::nvm::NVMResponse, ::nvm::NVMDataRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeploySmartContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeploySmartContract() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::nvm::NVMDeployRequest, ::nvm::NVMResponse>(std::bind(&WithStreamedUnaryMethod_DeploySmartContract<BaseClass>::StreamedDeploySmartContract, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeploySmartContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeploySmartContract(::grpc::ServerContext* context, const ::nvm::NVMDeployRequest* request, ::nvm::NVMResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeploySmartContract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nvm::NVMDeployRequest,::nvm::NVMResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DeploySmartContract<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DeploySmartContract<Service > StreamedService;
};

}  // namespace nvm


#endif  // GRPC_nvm_2eproto__INCLUDED
