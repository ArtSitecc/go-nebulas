// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nvm.proto

#include "nvm.pb.h"
#include "nvm.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* NVMService_method_names[] = {
  "/NVMService/DeploySmartContract",
  "/NVMService/NVMDataExchange",
};

std::unique_ptr< NVMService::Stub> NVMService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NVMService::Stub> stub(new NVMService::Stub(channel));
  return stub;
}

NVMService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DeploySmartContract_(NVMService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMDataExchange_(NVMService_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status NVMService::Stub::DeploySmartContract(::grpc::ClientContext* context, const ::NVMCallRequest& request, ::NVMRPCResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeploySmartContract_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::NVMRPCResponse>* NVMService::Stub::AsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::NVMCallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NVMRPCResponse>::Create(channel_.get(), cq, rpcmethod_DeploySmartContract_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NVMRPCResponse>* NVMService::Stub::PrepareAsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::NVMCallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NVMRPCResponse>::Create(channel_.get(), cq, rpcmethod_DeploySmartContract_, context, request, false);
}

::grpc::ClientReaderWriter< ::NVMDataRequest, ::NVMRPCResponse>* NVMService::Stub::NVMDataExchangeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::NVMDataRequest, ::NVMRPCResponse>::Create(channel_.get(), rpcmethod_NVMDataExchange_, context);
}

::grpc::ClientAsyncReaderWriter< ::NVMDataRequest, ::NVMRPCResponse>* NVMService::Stub::AsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::NVMDataRequest, ::NVMRPCResponse>::Create(channel_.get(), cq, rpcmethod_NVMDataExchange_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::NVMDataRequest, ::NVMRPCResponse>* NVMService::Stub::PrepareAsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::NVMDataRequest, ::NVMRPCResponse>::Create(channel_.get(), cq, rpcmethod_NVMDataExchange_, context, false, nullptr);
}

NVMService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMService::Service, ::NVMCallRequest, ::NVMRPCResponse>(
          std::mem_fn(&NVMService::Service::DeploySmartContract), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< NVMService::Service, ::NVMDataRequest, ::NVMRPCResponse>(
          std::mem_fn(&NVMService::Service::NVMDataExchange), this)));
}

NVMService::Service::~Service() {
}

::grpc::Status NVMService::Service::DeploySmartContract(::grpc::ServerContext* context, const ::NVMCallRequest* request, ::NVMRPCResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMService::Service::NVMDataExchange(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::NVMRPCResponse, ::NVMDataRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


