// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvm.proto

#ifndef PROTOBUF_nvm_2eproto__INCLUDED
#define PROTOBUF_nvm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_nvm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsNVMCallRequestImpl();
void InitDefaultsNVMCallRequest();
void InitDefaultsNVMDataRequestImpl();
void InitDefaultsNVMDataRequest();
void InitDefaultsNVMRPCResponseImpl();
void InitDefaultsNVMRPCResponse();
inline void InitDefaults() {
  InitDefaultsNVMCallRequest();
  InitDefaultsNVMDataRequest();
  InitDefaultsNVMRPCResponse();
}
}  // namespace protobuf_nvm_2eproto
class NVMCallRequest;
class NVMCallRequestDefaultTypeInternal;
extern NVMCallRequestDefaultTypeInternal _NVMCallRequest_default_instance_;
class NVMDataRequest;
class NVMDataRequestDefaultTypeInternal;
extern NVMDataRequestDefaultTypeInternal _NVMDataRequest_default_instance_;
class NVMRPCResponse;
class NVMRPCResponseDefaultTypeInternal;
extern NVMRPCResponseDefaultTypeInternal _NVMRPCResponse_default_instance_;

// ===================================================================

class NVMCallRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVMCallRequest) */ {
 public:
  NVMCallRequest();
  virtual ~NVMCallRequest();

  NVMCallRequest(const NVMCallRequest& from);

  inline NVMCallRequest& operator=(const NVMCallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NVMCallRequest(NVMCallRequest&& from) noexcept
    : NVMCallRequest() {
    *this = ::std::move(from);
  }

  inline NVMCallRequest& operator=(NVMCallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NVMCallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NVMCallRequest* internal_default_instance() {
    return reinterpret_cast<const NVMCallRequest*>(
               &_NVMCallRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NVMCallRequest* other);
  friend void swap(NVMCallRequest& a, NVMCallRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NVMCallRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NVMCallRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NVMCallRequest& from);
  void MergeFrom(const NVMCallRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NVMCallRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string func_args = 9;
  int func_args_size() const;
  void clear_func_args();
  static const int kFuncArgsFieldNumber = 9;
  const ::std::string& func_args(int index) const;
  ::std::string* mutable_func_args(int index);
  void set_func_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_func_args(int index, ::std::string&& value);
  #endif
  void set_func_args(int index, const char* value);
  void set_func_args(int index, const char* value, size_t size);
  ::std::string* add_func_args();
  void add_func_args(const ::std::string& value);
  #if LANG_CXX11
  void add_func_args(::std::string&& value);
  #endif
  void add_func_args(const char* value);
  void add_func_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& func_args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_func_args();

  // string script_src = 1;
  void clear_script_src();
  static const int kScriptSrcFieldNumber = 1;
  const ::std::string& script_src() const;
  void set_script_src(const ::std::string& value);
  #if LANG_CXX11
  void set_script_src(::std::string&& value);
  #endif
  void set_script_src(const char* value);
  void set_script_src(const char* value, size_t size);
  ::std::string* mutable_script_src();
  ::std::string* release_script_src();
  void set_allocated_script_src(::std::string* script_src);

  // string script_type = 2;
  void clear_script_type();
  static const int kScriptTypeFieldNumber = 2;
  const ::std::string& script_type() const;
  void set_script_type(const ::std::string& value);
  #if LANG_CXX11
  void set_script_type(::std::string&& value);
  #endif
  void set_script_type(const char* value);
  void set_script_type(const char* value, size_t size);
  ::std::string* mutable_script_type();
  ::std::string* release_script_type();
  void set_allocated_script_type(::std::string* script_type);

  // string func_name = 3;
  void clear_func_name();
  static const int kFuncNameFieldNumber = 3;
  const ::std::string& func_name() const;
  void set_func_name(const ::std::string& value);
  #if LANG_CXX11
  void set_func_name(::std::string&& value);
  #endif
  void set_func_name(const char* value);
  void set_func_name(const char* value, size_t size);
  ::std::string* mutable_func_name();
  ::std::string* release_func_name();
  void set_allocated_func_name(::std::string* func_name);

  // string from_addr = 7;
  void clear_from_addr();
  static const int kFromAddrFieldNumber = 7;
  const ::std::string& from_addr() const;
  void set_from_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_from_addr(::std::string&& value);
  #endif
  void set_from_addr(const char* value);
  void set_from_addr(const char* value, size_t size);
  ::std::string* mutable_from_addr();
  ::std::string* release_from_addr();
  void set_allocated_from_addr(::std::string* from_addr);

  // bool enable_limits = 4;
  void clear_enable_limits();
  static const int kEnableLimitsFieldNumber = 4;
  bool enable_limits() const;
  void set_enable_limits(bool value);

  // int32 limits_exe_instruction = 5;
  void clear_limits_exe_instruction();
  static const int kLimitsExeInstructionFieldNumber = 5;
  ::google::protobuf::int32 limits_exe_instruction() const;
  void set_limits_exe_instruction(::google::protobuf::int32 value);

  // int64 block_height = 8;
  void clear_block_height();
  static const int kBlockHeightFieldNumber = 8;
  ::google::protobuf::int64 block_height() const;
  void set_block_height(::google::protobuf::int64 value);

  // int32 limits_total_mem_size = 6;
  void clear_limits_total_mem_size();
  static const int kLimitsTotalMemSizeFieldNumber = 6;
  ::google::protobuf::int32 limits_total_mem_size() const;
  void set_limits_total_mem_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NVMCallRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> func_args_;
  ::google::protobuf::internal::ArenaStringPtr script_src_;
  ::google::protobuf::internal::ArenaStringPtr script_type_;
  ::google::protobuf::internal::ArenaStringPtr func_name_;
  ::google::protobuf::internal::ArenaStringPtr from_addr_;
  bool enable_limits_;
  ::google::protobuf::int32 limits_exe_instruction_;
  ::google::protobuf::int64 block_height_;
  ::google::protobuf::int32 limits_total_mem_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_nvm_2eproto::TableStruct;
  friend void ::protobuf_nvm_2eproto::InitDefaultsNVMCallRequestImpl();
};
// -------------------------------------------------------------------

class NVMDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVMDataRequest) */ {
 public:
  NVMDataRequest();
  virtual ~NVMDataRequest();

  NVMDataRequest(const NVMDataRequest& from);

  inline NVMDataRequest& operator=(const NVMDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NVMDataRequest(NVMDataRequest&& from) noexcept
    : NVMDataRequest() {
    *this = ::std::move(from);
  }

  inline NVMDataRequest& operator=(NVMDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NVMDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NVMDataRequest* internal_default_instance() {
    return reinterpret_cast<const NVMDataRequest*>(
               &_NVMDataRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(NVMDataRequest* other);
  friend void swap(NVMDataRequest& a, NVMDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NVMDataRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NVMDataRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NVMDataRequest& from);
  void MergeFrom(const NVMDataRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NVMDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string script_src = 1;
  void clear_script_src();
  static const int kScriptSrcFieldNumber = 1;
  const ::std::string& script_src() const;
  void set_script_src(const ::std::string& value);
  #if LANG_CXX11
  void set_script_src(::std::string&& value);
  #endif
  void set_script_src(const char* value);
  void set_script_src(const char* value, size_t size);
  ::std::string* mutable_script_src();
  ::std::string* release_script_src();
  void set_allocated_script_src(::std::string* script_src);

  // string script_type = 2;
  void clear_script_type();
  static const int kScriptTypeFieldNumber = 2;
  const ::std::string& script_type() const;
  void set_script_type(const ::std::string& value);
  #if LANG_CXX11
  void set_script_type(::std::string&& value);
  #endif
  void set_script_type(const char* value);
  void set_script_type(const char* value, size_t size);
  ::std::string* mutable_script_type();
  ::std::string* release_script_type();
  void set_allocated_script_type(::std::string* script_type);

  // string function_name = 3;
  void clear_function_name();
  static const int kFunctionNameFieldNumber = 3;
  const ::std::string& function_name() const;
  void set_function_name(const ::std::string& value);
  #if LANG_CXX11
  void set_function_name(::std::string&& value);
  #endif
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  ::std::string* mutable_function_name();
  ::std::string* release_function_name();
  void set_allocated_function_name(::std::string* function_name);

  // string contract_addr = 4;
  void clear_contract_addr();
  static const int kContractAddrFieldNumber = 4;
  const ::std::string& contract_addr() const;
  void set_contract_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_contract_addr(::std::string&& value);
  #endif
  void set_contract_addr(const char* value);
  void set_contract_addr(const char* value, size_t size);
  ::std::string* mutable_contract_addr();
  ::std::string* release_contract_addr();
  void set_allocated_contract_addr(::std::string* contract_addr);

  // string extra_data = 5;
  void clear_extra_data();
  static const int kExtraDataFieldNumber = 5;
  const ::std::string& extra_data() const;
  void set_extra_data(const ::std::string& value);
  #if LANG_CXX11
  void set_extra_data(::std::string&& value);
  #endif
  void set_extra_data(const char* value);
  void set_extra_data(const char* value, size_t size);
  ::std::string* mutable_extra_data();
  ::std::string* release_extra_data();
  void set_allocated_extra_data(::std::string* extra_data);

  // @@protoc_insertion_point(class_scope:NVMDataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr script_src_;
  ::google::protobuf::internal::ArenaStringPtr script_type_;
  ::google::protobuf::internal::ArenaStringPtr function_name_;
  ::google::protobuf::internal::ArenaStringPtr contract_addr_;
  ::google::protobuf::internal::ArenaStringPtr extra_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_nvm_2eproto::TableStruct;
  friend void ::protobuf_nvm_2eproto::InitDefaultsNVMDataRequestImpl();
};
// -------------------------------------------------------------------

class NVMRPCResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVMRPCResponse) */ {
 public:
  NVMRPCResponse();
  virtual ~NVMRPCResponse();

  NVMRPCResponse(const NVMRPCResponse& from);

  inline NVMRPCResponse& operator=(const NVMRPCResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NVMRPCResponse(NVMRPCResponse&& from) noexcept
    : NVMRPCResponse() {
    *this = ::std::move(from);
  }

  inline NVMRPCResponse& operator=(NVMRPCResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NVMRPCResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NVMRPCResponse* internal_default_instance() {
    return reinterpret_cast<const NVMRPCResponse*>(
               &_NVMRPCResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NVMRPCResponse* other);
  friend void swap(NVMRPCResponse& a, NVMRPCResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NVMRPCResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NVMRPCResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NVMRPCResponse& from);
  void MergeFrom(const NVMRPCResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NVMRPCResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NVMRPCResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_nvm_2eproto::TableStruct;
  friend void ::protobuf_nvm_2eproto::InitDefaultsNVMRPCResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NVMCallRequest

// string script_src = 1;
inline void NVMCallRequest::clear_script_src() {
  script_src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMCallRequest::script_src() const {
  // @@protoc_insertion_point(field_get:NVMCallRequest.script_src)
  return script_src_.GetNoArena();
}
inline void NVMCallRequest::set_script_src(const ::std::string& value) {
  
  script_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMCallRequest.script_src)
}
#if LANG_CXX11
inline void NVMCallRequest::set_script_src(::std::string&& value) {
  
  script_src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMCallRequest.script_src)
}
#endif
inline void NVMCallRequest::set_script_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  script_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMCallRequest.script_src)
}
inline void NVMCallRequest::set_script_src(const char* value, size_t size) {
  
  script_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMCallRequest.script_src)
}
inline ::std::string* NVMCallRequest::mutable_script_src() {
  
  // @@protoc_insertion_point(field_mutable:NVMCallRequest.script_src)
  return script_src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMCallRequest::release_script_src() {
  // @@protoc_insertion_point(field_release:NVMCallRequest.script_src)
  
  return script_src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMCallRequest::set_allocated_script_src(::std::string* script_src) {
  if (script_src != NULL) {
    
  } else {
    
  }
  script_src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_src);
  // @@protoc_insertion_point(field_set_allocated:NVMCallRequest.script_src)
}

// string script_type = 2;
inline void NVMCallRequest::clear_script_type() {
  script_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMCallRequest::script_type() const {
  // @@protoc_insertion_point(field_get:NVMCallRequest.script_type)
  return script_type_.GetNoArena();
}
inline void NVMCallRequest::set_script_type(const ::std::string& value) {
  
  script_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMCallRequest.script_type)
}
#if LANG_CXX11
inline void NVMCallRequest::set_script_type(::std::string&& value) {
  
  script_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMCallRequest.script_type)
}
#endif
inline void NVMCallRequest::set_script_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  script_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMCallRequest.script_type)
}
inline void NVMCallRequest::set_script_type(const char* value, size_t size) {
  
  script_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMCallRequest.script_type)
}
inline ::std::string* NVMCallRequest::mutable_script_type() {
  
  // @@protoc_insertion_point(field_mutable:NVMCallRequest.script_type)
  return script_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMCallRequest::release_script_type() {
  // @@protoc_insertion_point(field_release:NVMCallRequest.script_type)
  
  return script_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMCallRequest::set_allocated_script_type(::std::string* script_type) {
  if (script_type != NULL) {
    
  } else {
    
  }
  script_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_type);
  // @@protoc_insertion_point(field_set_allocated:NVMCallRequest.script_type)
}

// string func_name = 3;
inline void NVMCallRequest::clear_func_name() {
  func_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMCallRequest::func_name() const {
  // @@protoc_insertion_point(field_get:NVMCallRequest.func_name)
  return func_name_.GetNoArena();
}
inline void NVMCallRequest::set_func_name(const ::std::string& value) {
  
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMCallRequest.func_name)
}
#if LANG_CXX11
inline void NVMCallRequest::set_func_name(::std::string&& value) {
  
  func_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMCallRequest.func_name)
}
#endif
inline void NVMCallRequest::set_func_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMCallRequest.func_name)
}
inline void NVMCallRequest::set_func_name(const char* value, size_t size) {
  
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMCallRequest.func_name)
}
inline ::std::string* NVMCallRequest::mutable_func_name() {
  
  // @@protoc_insertion_point(field_mutable:NVMCallRequest.func_name)
  return func_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMCallRequest::release_func_name() {
  // @@protoc_insertion_point(field_release:NVMCallRequest.func_name)
  
  return func_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMCallRequest::set_allocated_func_name(::std::string* func_name) {
  if (func_name != NULL) {
    
  } else {
    
  }
  func_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func_name);
  // @@protoc_insertion_point(field_set_allocated:NVMCallRequest.func_name)
}

// bool enable_limits = 4;
inline void NVMCallRequest::clear_enable_limits() {
  enable_limits_ = false;
}
inline bool NVMCallRequest::enable_limits() const {
  // @@protoc_insertion_point(field_get:NVMCallRequest.enable_limits)
  return enable_limits_;
}
inline void NVMCallRequest::set_enable_limits(bool value) {
  
  enable_limits_ = value;
  // @@protoc_insertion_point(field_set:NVMCallRequest.enable_limits)
}

// int32 limits_exe_instruction = 5;
inline void NVMCallRequest::clear_limits_exe_instruction() {
  limits_exe_instruction_ = 0;
}
inline ::google::protobuf::int32 NVMCallRequest::limits_exe_instruction() const {
  // @@protoc_insertion_point(field_get:NVMCallRequest.limits_exe_instruction)
  return limits_exe_instruction_;
}
inline void NVMCallRequest::set_limits_exe_instruction(::google::protobuf::int32 value) {
  
  limits_exe_instruction_ = value;
  // @@protoc_insertion_point(field_set:NVMCallRequest.limits_exe_instruction)
}

// int32 limits_total_mem_size = 6;
inline void NVMCallRequest::clear_limits_total_mem_size() {
  limits_total_mem_size_ = 0;
}
inline ::google::protobuf::int32 NVMCallRequest::limits_total_mem_size() const {
  // @@protoc_insertion_point(field_get:NVMCallRequest.limits_total_mem_size)
  return limits_total_mem_size_;
}
inline void NVMCallRequest::set_limits_total_mem_size(::google::protobuf::int32 value) {
  
  limits_total_mem_size_ = value;
  // @@protoc_insertion_point(field_set:NVMCallRequest.limits_total_mem_size)
}

// string from_addr = 7;
inline void NVMCallRequest::clear_from_addr() {
  from_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMCallRequest::from_addr() const {
  // @@protoc_insertion_point(field_get:NVMCallRequest.from_addr)
  return from_addr_.GetNoArena();
}
inline void NVMCallRequest::set_from_addr(const ::std::string& value) {
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMCallRequest.from_addr)
}
#if LANG_CXX11
inline void NVMCallRequest::set_from_addr(::std::string&& value) {
  
  from_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMCallRequest.from_addr)
}
#endif
inline void NVMCallRequest::set_from_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMCallRequest.from_addr)
}
inline void NVMCallRequest::set_from_addr(const char* value, size_t size) {
  
  from_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMCallRequest.from_addr)
}
inline ::std::string* NVMCallRequest::mutable_from_addr() {
  
  // @@protoc_insertion_point(field_mutable:NVMCallRequest.from_addr)
  return from_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMCallRequest::release_from_addr() {
  // @@protoc_insertion_point(field_release:NVMCallRequest.from_addr)
  
  return from_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMCallRequest::set_allocated_from_addr(::std::string* from_addr) {
  if (from_addr != NULL) {
    
  } else {
    
  }
  from_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_addr);
  // @@protoc_insertion_point(field_set_allocated:NVMCallRequest.from_addr)
}

// int64 block_height = 8;
inline void NVMCallRequest::clear_block_height() {
  block_height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NVMCallRequest::block_height() const {
  // @@protoc_insertion_point(field_get:NVMCallRequest.block_height)
  return block_height_;
}
inline void NVMCallRequest::set_block_height(::google::protobuf::int64 value) {
  
  block_height_ = value;
  // @@protoc_insertion_point(field_set:NVMCallRequest.block_height)
}

// repeated string func_args = 9;
inline int NVMCallRequest::func_args_size() const {
  return func_args_.size();
}
inline void NVMCallRequest::clear_func_args() {
  func_args_.Clear();
}
inline const ::std::string& NVMCallRequest::func_args(int index) const {
  // @@protoc_insertion_point(field_get:NVMCallRequest.func_args)
  return func_args_.Get(index);
}
inline ::std::string* NVMCallRequest::mutable_func_args(int index) {
  // @@protoc_insertion_point(field_mutable:NVMCallRequest.func_args)
  return func_args_.Mutable(index);
}
inline void NVMCallRequest::set_func_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NVMCallRequest.func_args)
  func_args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NVMCallRequest::set_func_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NVMCallRequest.func_args)
  func_args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NVMCallRequest::set_func_args(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  func_args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NVMCallRequest.func_args)
}
inline void NVMCallRequest::set_func_args(int index, const char* value, size_t size) {
  func_args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NVMCallRequest.func_args)
}
inline ::std::string* NVMCallRequest::add_func_args() {
  // @@protoc_insertion_point(field_add_mutable:NVMCallRequest.func_args)
  return func_args_.Add();
}
inline void NVMCallRequest::add_func_args(const ::std::string& value) {
  func_args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NVMCallRequest.func_args)
}
#if LANG_CXX11
inline void NVMCallRequest::add_func_args(::std::string&& value) {
  func_args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NVMCallRequest.func_args)
}
#endif
inline void NVMCallRequest::add_func_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  func_args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NVMCallRequest.func_args)
}
inline void NVMCallRequest::add_func_args(const char* value, size_t size) {
  func_args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NVMCallRequest.func_args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NVMCallRequest::func_args() const {
  // @@protoc_insertion_point(field_list:NVMCallRequest.func_args)
  return func_args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NVMCallRequest::mutable_func_args() {
  // @@protoc_insertion_point(field_mutable_list:NVMCallRequest.func_args)
  return &func_args_;
}

// -------------------------------------------------------------------

// NVMDataRequest

// string script_src = 1;
inline void NVMDataRequest::clear_script_src() {
  script_src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMDataRequest::script_src() const {
  // @@protoc_insertion_point(field_get:NVMDataRequest.script_src)
  return script_src_.GetNoArena();
}
inline void NVMDataRequest::set_script_src(const ::std::string& value) {
  
  script_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMDataRequest.script_src)
}
#if LANG_CXX11
inline void NVMDataRequest::set_script_src(::std::string&& value) {
  
  script_src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMDataRequest.script_src)
}
#endif
inline void NVMDataRequest::set_script_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  script_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMDataRequest.script_src)
}
inline void NVMDataRequest::set_script_src(const char* value, size_t size) {
  
  script_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMDataRequest.script_src)
}
inline ::std::string* NVMDataRequest::mutable_script_src() {
  
  // @@protoc_insertion_point(field_mutable:NVMDataRequest.script_src)
  return script_src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMDataRequest::release_script_src() {
  // @@protoc_insertion_point(field_release:NVMDataRequest.script_src)
  
  return script_src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMDataRequest::set_allocated_script_src(::std::string* script_src) {
  if (script_src != NULL) {
    
  } else {
    
  }
  script_src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_src);
  // @@protoc_insertion_point(field_set_allocated:NVMDataRequest.script_src)
}

// string script_type = 2;
inline void NVMDataRequest::clear_script_type() {
  script_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMDataRequest::script_type() const {
  // @@protoc_insertion_point(field_get:NVMDataRequest.script_type)
  return script_type_.GetNoArena();
}
inline void NVMDataRequest::set_script_type(const ::std::string& value) {
  
  script_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMDataRequest.script_type)
}
#if LANG_CXX11
inline void NVMDataRequest::set_script_type(::std::string&& value) {
  
  script_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMDataRequest.script_type)
}
#endif
inline void NVMDataRequest::set_script_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  script_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMDataRequest.script_type)
}
inline void NVMDataRequest::set_script_type(const char* value, size_t size) {
  
  script_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMDataRequest.script_type)
}
inline ::std::string* NVMDataRequest::mutable_script_type() {
  
  // @@protoc_insertion_point(field_mutable:NVMDataRequest.script_type)
  return script_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMDataRequest::release_script_type() {
  // @@protoc_insertion_point(field_release:NVMDataRequest.script_type)
  
  return script_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMDataRequest::set_allocated_script_type(::std::string* script_type) {
  if (script_type != NULL) {
    
  } else {
    
  }
  script_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_type);
  // @@protoc_insertion_point(field_set_allocated:NVMDataRequest.script_type)
}

// string function_name = 3;
inline void NVMDataRequest::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMDataRequest::function_name() const {
  // @@protoc_insertion_point(field_get:NVMDataRequest.function_name)
  return function_name_.GetNoArena();
}
inline void NVMDataRequest::set_function_name(const ::std::string& value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMDataRequest.function_name)
}
#if LANG_CXX11
inline void NVMDataRequest::set_function_name(::std::string&& value) {
  
  function_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMDataRequest.function_name)
}
#endif
inline void NVMDataRequest::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMDataRequest.function_name)
}
inline void NVMDataRequest::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMDataRequest.function_name)
}
inline ::std::string* NVMDataRequest::mutable_function_name() {
  
  // @@protoc_insertion_point(field_mutable:NVMDataRequest.function_name)
  return function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMDataRequest::release_function_name() {
  // @@protoc_insertion_point(field_release:NVMDataRequest.function_name)
  
  return function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMDataRequest::set_allocated_function_name(::std::string* function_name) {
  if (function_name != NULL) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:NVMDataRequest.function_name)
}

// string contract_addr = 4;
inline void NVMDataRequest::clear_contract_addr() {
  contract_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMDataRequest::contract_addr() const {
  // @@protoc_insertion_point(field_get:NVMDataRequest.contract_addr)
  return contract_addr_.GetNoArena();
}
inline void NVMDataRequest::set_contract_addr(const ::std::string& value) {
  
  contract_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMDataRequest.contract_addr)
}
#if LANG_CXX11
inline void NVMDataRequest::set_contract_addr(::std::string&& value) {
  
  contract_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMDataRequest.contract_addr)
}
#endif
inline void NVMDataRequest::set_contract_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contract_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMDataRequest.contract_addr)
}
inline void NVMDataRequest::set_contract_addr(const char* value, size_t size) {
  
  contract_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMDataRequest.contract_addr)
}
inline ::std::string* NVMDataRequest::mutable_contract_addr() {
  
  // @@protoc_insertion_point(field_mutable:NVMDataRequest.contract_addr)
  return contract_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMDataRequest::release_contract_addr() {
  // @@protoc_insertion_point(field_release:NVMDataRequest.contract_addr)
  
  return contract_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMDataRequest::set_allocated_contract_addr(::std::string* contract_addr) {
  if (contract_addr != NULL) {
    
  } else {
    
  }
  contract_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract_addr);
  // @@protoc_insertion_point(field_set_allocated:NVMDataRequest.contract_addr)
}

// string extra_data = 5;
inline void NVMDataRequest::clear_extra_data() {
  extra_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMDataRequest::extra_data() const {
  // @@protoc_insertion_point(field_get:NVMDataRequest.extra_data)
  return extra_data_.GetNoArena();
}
inline void NVMDataRequest::set_extra_data(const ::std::string& value) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMDataRequest.extra_data)
}
#if LANG_CXX11
inline void NVMDataRequest::set_extra_data(::std::string&& value) {
  
  extra_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMDataRequest.extra_data)
}
#endif
inline void NVMDataRequest::set_extra_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMDataRequest.extra_data)
}
inline void NVMDataRequest::set_extra_data(const char* value, size_t size) {
  
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMDataRequest.extra_data)
}
inline ::std::string* NVMDataRequest::mutable_extra_data() {
  
  // @@protoc_insertion_point(field_mutable:NVMDataRequest.extra_data)
  return extra_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMDataRequest::release_extra_data() {
  // @@protoc_insertion_point(field_release:NVMDataRequest.extra_data)
  
  return extra_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMDataRequest::set_allocated_extra_data(::std::string* extra_data) {
  if (extra_data != NULL) {
    
  } else {
    
  }
  extra_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_data);
  // @@protoc_insertion_point(field_set_allocated:NVMDataRequest.extra_data)
}

// -------------------------------------------------------------------

// NVMRPCResponse

// int32 result = 1;
inline void NVMRPCResponse::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 NVMRPCResponse::result() const {
  // @@protoc_insertion_point(field_get:NVMRPCResponse.result)
  return result_;
}
inline void NVMRPCResponse::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NVMRPCResponse.result)
}

// string msg = 2;
inline void NVMRPCResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMRPCResponse::msg() const {
  // @@protoc_insertion_point(field_get:NVMRPCResponse.msg)
  return msg_.GetNoArena();
}
inline void NVMRPCResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMRPCResponse.msg)
}
#if LANG_CXX11
inline void NVMRPCResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMRPCResponse.msg)
}
#endif
inline void NVMRPCResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMRPCResponse.msg)
}
inline void NVMRPCResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMRPCResponse.msg)
}
inline ::std::string* NVMRPCResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:NVMRPCResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMRPCResponse::release_msg() {
  // @@protoc_insertion_point(field_release:NVMRPCResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMRPCResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NVMRPCResponse.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nvm_2eproto__INCLUDED
