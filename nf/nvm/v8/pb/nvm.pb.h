// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvm.proto

#ifndef PROTOBUF_INCLUDED_nvm_2eproto
#define PROTOBUF_INCLUDED_nvm_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_nvm_2eproto 

namespace protobuf_nvm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_nvm_2eproto
class NVMCallbackResponse;
class NVMCallbackResponseDefaultTypeInternal;
extern NVMCallbackResponseDefaultTypeInternal _NVMCallbackResponse_default_instance_;
class NVMCallbackResult;
class NVMCallbackResultDefaultTypeInternal;
extern NVMCallbackResultDefaultTypeInternal _NVMCallbackResult_default_instance_;
class NVMConfigBundle;
class NVMConfigBundleDefaultTypeInternal;
extern NVMConfigBundleDefaultTypeInternal _NVMConfigBundle_default_instance_;
class NVMDataRequest;
class NVMDataRequestDefaultTypeInternal;
extern NVMDataRequestDefaultTypeInternal _NVMDataRequest_default_instance_;
class NVMDataResponse;
class NVMDataResponseDefaultTypeInternal;
extern NVMDataResponseDefaultTypeInternal _NVMDataResponse_default_instance_;
class NVMFinalResponse;
class NVMFinalResponseDefaultTypeInternal;
extern NVMFinalResponseDefaultTypeInternal _NVMFinalResponse_default_instance_;
class NVMStatsBundle;
class NVMStatsBundleDefaultTypeInternal;
extern NVMStatsBundleDefaultTypeInternal _NVMStatsBundle_default_instance_;
namespace google {
namespace protobuf {
template<> ::NVMCallbackResponse* Arena::CreateMaybeMessage<::NVMCallbackResponse>(Arena*);
template<> ::NVMCallbackResult* Arena::CreateMaybeMessage<::NVMCallbackResult>(Arena*);
template<> ::NVMConfigBundle* Arena::CreateMaybeMessage<::NVMConfigBundle>(Arena*);
template<> ::NVMDataRequest* Arena::CreateMaybeMessage<::NVMDataRequest>(Arena*);
template<> ::NVMDataResponse* Arena::CreateMaybeMessage<::NVMDataResponse>(Arena*);
template<> ::NVMFinalResponse* Arena::CreateMaybeMessage<::NVMFinalResponse>(Arena*);
template<> ::NVMStatsBundle* Arena::CreateMaybeMessage<::NVMStatsBundle>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class NVMConfigBundle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVMConfigBundle) */ {
 public:
  NVMConfigBundle();
  virtual ~NVMConfigBundle();

  NVMConfigBundle(const NVMConfigBundle& from);

  inline NVMConfigBundle& operator=(const NVMConfigBundle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NVMConfigBundle(NVMConfigBundle&& from) noexcept
    : NVMConfigBundle() {
    *this = ::std::move(from);
  }

  inline NVMConfigBundle& operator=(NVMConfigBundle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NVMConfigBundle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NVMConfigBundle* internal_default_instance() {
    return reinterpret_cast<const NVMConfigBundle*>(
               &_NVMConfigBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NVMConfigBundle* other);
  friend void swap(NVMConfigBundle& a, NVMConfigBundle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NVMConfigBundle* New() const final {
    return CreateMaybeMessage<NVMConfigBundle>(NULL);
  }

  NVMConfigBundle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NVMConfigBundle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NVMConfigBundle& from);
  void MergeFrom(const NVMConfigBundle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMConfigBundle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string script_src = 1;
  void clear_script_src();
  static const int kScriptSrcFieldNumber = 1;
  const ::std::string& script_src() const;
  void set_script_src(const ::std::string& value);
  #if LANG_CXX11
  void set_script_src(::std::string&& value);
  #endif
  void set_script_src(const char* value);
  void set_script_src(const char* value, size_t size);
  ::std::string* mutable_script_src();
  ::std::string* release_script_src();
  void set_allocated_script_src(::std::string* script_src);

  // string script_type = 2;
  void clear_script_type();
  static const int kScriptTypeFieldNumber = 2;
  const ::std::string& script_type() const;
  void set_script_type(const ::std::string& value);
  #if LANG_CXX11
  void set_script_type(::std::string&& value);
  #endif
  void set_script_type(const char* value);
  void set_script_type(const char* value, size_t size);
  ::std::string* mutable_script_type();
  ::std::string* release_script_type();
  void set_allocated_script_type(::std::string* script_type);

  // string runnable_src = 3;
  void clear_runnable_src();
  static const int kRunnableSrcFieldNumber = 3;
  const ::std::string& runnable_src() const;
  void set_runnable_src(const ::std::string& value);
  #if LANG_CXX11
  void set_runnable_src(::std::string&& value);
  #endif
  void set_runnable_src(const char* value);
  void set_runnable_src(const char* value, size_t size);
  ::std::string* mutable_runnable_src();
  ::std::string* release_runnable_src();
  void set_allocated_runnable_src(::std::string* runnable_src);

  // string block_json = 4;
  void clear_block_json();
  static const int kBlockJsonFieldNumber = 4;
  const ::std::string& block_json() const;
  void set_block_json(const ::std::string& value);
  #if LANG_CXX11
  void set_block_json(::std::string&& value);
  #endif
  void set_block_json(const char* value);
  void set_block_json(const char* value, size_t size);
  ::std::string* mutable_block_json();
  ::std::string* release_block_json();
  void set_allocated_block_json(::std::string* block_json);

  // string tx_json = 5;
  void clear_tx_json();
  static const int kTxJsonFieldNumber = 5;
  const ::std::string& tx_json() const;
  void set_tx_json(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_json(::std::string&& value);
  #endif
  void set_tx_json(const char* value);
  void set_tx_json(const char* value, size_t size);
  ::std::string* mutable_tx_json();
  ::std::string* release_tx_json();
  void set_allocated_tx_json(::std::string* tx_json);

  // string module_id = 6;
  void clear_module_id();
  static const int kModuleIdFieldNumber = 6;
  const ::std::string& module_id() const;
  void set_module_id(const ::std::string& value);
  #if LANG_CXX11
  void set_module_id(::std::string&& value);
  #endif
  void set_module_id(const char* value);
  void set_module_id(const char* value, size_t size);
  ::std::string* mutable_module_id();
  ::std::string* release_module_id();
  void set_allocated_module_id(::std::string* module_id);

  // uint64 block_height = 7;
  void clear_block_height();
  static const int kBlockHeightFieldNumber = 7;
  ::google::protobuf::uint64 block_height() const;
  void set_block_height(::google::protobuf::uint64 value);

  // uint32 chain_id = 8;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 8;
  ::google::protobuf::uint32 chain_id() const;
  void set_chain_id(::google::protobuf::uint32 value);

  // bool enable_limits = 9;
  void clear_enable_limits();
  static const int kEnableLimitsFieldNumber = 9;
  bool enable_limits() const;
  void set_enable_limits(bool value);

  // uint64 limits_exe_instruction = 10;
  void clear_limits_exe_instruction();
  static const int kLimitsExeInstructionFieldNumber = 10;
  ::google::protobuf::uint64 limits_exe_instruction() const;
  void set_limits_exe_instruction(::google::protobuf::uint64 value);

  // uint64 limits_total_mem_size = 11;
  void clear_limits_total_mem_size();
  static const int kLimitsTotalMemSizeFieldNumber = 11;
  ::google::protobuf::uint64 limits_total_mem_size() const;
  void set_limits_total_mem_size(::google::protobuf::uint64 value);

  // uint64 execution_timeout = 12;
  void clear_execution_timeout();
  static const int kExecutionTimeoutFieldNumber = 12;
  ::google::protobuf::uint64 execution_timeout() const;
  void set_execution_timeout(::google::protobuf::uint64 value);

  // uint64 timeout_gas_limit_cost = 13;
  void clear_timeout_gas_limit_cost();
  static const int kTimeoutGasLimitCostFieldNumber = 13;
  ::google::protobuf::uint64 timeout_gas_limit_cost() const;
  void set_timeout_gas_limit_cost(::google::protobuf::uint64 value);

  // uint64 max_limits_of_execution_instruction = 14;
  void clear_max_limits_of_execution_instruction();
  static const int kMaxLimitsOfExecutionInstructionFieldNumber = 14;
  ::google::protobuf::uint64 max_limits_of_execution_instruction() const;
  void set_max_limits_of_execution_instruction(::google::protobuf::uint64 value);

  // uint64 default_limits_of_total_mem_size = 15;
  void clear_default_limits_of_total_mem_size();
  static const int kDefaultLimitsOfTotalMemSizeFieldNumber = 15;
  ::google::protobuf::uint64 default_limits_of_total_mem_size() const;
  void set_default_limits_of_total_mem_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NVMConfigBundle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr script_src_;
  ::google::protobuf::internal::ArenaStringPtr script_type_;
  ::google::protobuf::internal::ArenaStringPtr runnable_src_;
  ::google::protobuf::internal::ArenaStringPtr block_json_;
  ::google::protobuf::internal::ArenaStringPtr tx_json_;
  ::google::protobuf::internal::ArenaStringPtr module_id_;
  ::google::protobuf::uint64 block_height_;
  ::google::protobuf::uint32 chain_id_;
  bool enable_limits_;
  ::google::protobuf::uint64 limits_exe_instruction_;
  ::google::protobuf::uint64 limits_total_mem_size_;
  ::google::protobuf::uint64 execution_timeout_;
  ::google::protobuf::uint64 timeout_gas_limit_cost_;
  ::google::protobuf::uint64 max_limits_of_execution_instruction_;
  ::google::protobuf::uint64 default_limits_of_total_mem_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nvm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NVMCallbackResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVMCallbackResult) */ {
 public:
  NVMCallbackResult();
  virtual ~NVMCallbackResult();

  NVMCallbackResult(const NVMCallbackResult& from);

  inline NVMCallbackResult& operator=(const NVMCallbackResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NVMCallbackResult(NVMCallbackResult&& from) noexcept
    : NVMCallbackResult() {
    *this = ::std::move(from);
  }

  inline NVMCallbackResult& operator=(NVMCallbackResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NVMCallbackResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NVMCallbackResult* internal_default_instance() {
    return reinterpret_cast<const NVMCallbackResult*>(
               &_NVMCallbackResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NVMCallbackResult* other);
  friend void swap(NVMCallbackResult& a, NVMCallbackResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NVMCallbackResult* New() const final {
    return CreateMaybeMessage<NVMCallbackResult>(NULL);
  }

  NVMCallbackResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NVMCallbackResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NVMCallbackResult& from);
  void MergeFrom(const NVMCallbackResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMCallbackResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string extra = 3;
  int extra_size() const;
  void clear_extra();
  static const int kExtraFieldNumber = 3;
  const ::std::string& extra(int index) const;
  ::std::string* mutable_extra(int index);
  void set_extra(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_extra(int index, ::std::string&& value);
  #endif
  void set_extra(int index, const char* value);
  void set_extra(int index, const char* value, size_t size);
  ::std::string* add_extra();
  void add_extra(const ::std::string& value);
  #if LANG_CXX11
  void add_extra(::std::string&& value);
  #endif
  void add_extra(const char* value);
  void add_extra(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& extra() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_extra();

  // string func_name = 1;
  void clear_func_name();
  static const int kFuncNameFieldNumber = 1;
  const ::std::string& func_name() const;
  void set_func_name(const ::std::string& value);
  #if LANG_CXX11
  void set_func_name(::std::string&& value);
  #endif
  void set_func_name(const char* value);
  void set_func_name(const char* value, size_t size);
  ::std::string* mutable_func_name();
  ::std::string* release_func_name();
  void set_allocated_func_name(::std::string* func_name);

  // string result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:NVMCallbackResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> extra_;
  ::google::protobuf::internal::ArenaStringPtr func_name_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nvm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NVMDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVMDataRequest) */ {
 public:
  NVMDataRequest();
  virtual ~NVMDataRequest();

  NVMDataRequest(const NVMDataRequest& from);

  inline NVMDataRequest& operator=(const NVMDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NVMDataRequest(NVMDataRequest&& from) noexcept
    : NVMDataRequest() {
    *this = ::std::move(from);
  }

  inline NVMDataRequest& operator=(NVMDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NVMDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NVMDataRequest* internal_default_instance() {
    return reinterpret_cast<const NVMDataRequest*>(
               &_NVMDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NVMDataRequest* other);
  friend void swap(NVMDataRequest& a, NVMDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NVMDataRequest* New() const final {
    return CreateMaybeMessage<NVMDataRequest>(NULL);
  }

  NVMDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NVMDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NVMDataRequest& from);
  void MergeFrom(const NVMDataRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_type = 1;
  void clear_request_type();
  static const int kRequestTypeFieldNumber = 1;
  const ::std::string& request_type() const;
  void set_request_type(const ::std::string& value);
  #if LANG_CXX11
  void set_request_type(::std::string&& value);
  #endif
  void set_request_type(const char* value);
  void set_request_type(const char* value, size_t size);
  ::std::string* mutable_request_type();
  ::std::string* release_request_type();
  void set_allocated_request_type(::std::string* request_type);

  // .NVMCallbackResult callback_result = 5;
  bool has_callback_result() const;
  void clear_callback_result();
  static const int kCallbackResultFieldNumber = 5;
  private:
  const ::NVMCallbackResult& _internal_callback_result() const;
  public:
  const ::NVMCallbackResult& callback_result() const;
  ::NVMCallbackResult* release_callback_result();
  ::NVMCallbackResult* mutable_callback_result();
  void set_allocated_callback_result(::NVMCallbackResult* callback_result);

  // .NVMConfigBundle config_bundle = 6;
  bool has_config_bundle() const;
  void clear_config_bundle();
  static const int kConfigBundleFieldNumber = 6;
  private:
  const ::NVMConfigBundle& _internal_config_bundle() const;
  public:
  const ::NVMConfigBundle& config_bundle() const;
  ::NVMConfigBundle* release_config_bundle();
  ::NVMConfigBundle* mutable_config_bundle();
  void set_allocated_config_bundle(::NVMConfigBundle* config_bundle);

  // uint64 lcs_handler = 3;
  void clear_lcs_handler();
  static const int kLcsHandlerFieldNumber = 3;
  ::google::protobuf::uint64 lcs_handler() const;
  void set_lcs_handler(::google::protobuf::uint64 value);

  // uint64 gcs_handler = 4;
  void clear_gcs_handler();
  static const int kGcsHandlerFieldNumber = 4;
  ::google::protobuf::uint64 gcs_handler() const;
  void set_gcs_handler(::google::protobuf::uint64 value);

  // uint32 request_indx = 2;
  void clear_request_indx();
  static const int kRequestIndxFieldNumber = 2;
  ::google::protobuf::uint32 request_indx() const;
  void set_request_indx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NVMDataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_type_;
  ::NVMCallbackResult* callback_result_;
  ::NVMConfigBundle* config_bundle_;
  ::google::protobuf::uint64 lcs_handler_;
  ::google::protobuf::uint64 gcs_handler_;
  ::google::protobuf::uint32 request_indx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nvm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NVMStatsBundle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVMStatsBundle) */ {
 public:
  NVMStatsBundle();
  virtual ~NVMStatsBundle();

  NVMStatsBundle(const NVMStatsBundle& from);

  inline NVMStatsBundle& operator=(const NVMStatsBundle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NVMStatsBundle(NVMStatsBundle&& from) noexcept
    : NVMStatsBundle() {
    *this = ::std::move(from);
  }

  inline NVMStatsBundle& operator=(NVMStatsBundle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NVMStatsBundle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NVMStatsBundle* internal_default_instance() {
    return reinterpret_cast<const NVMStatsBundle*>(
               &_NVMStatsBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NVMStatsBundle* other);
  friend void swap(NVMStatsBundle& a, NVMStatsBundle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NVMStatsBundle* New() const final {
    return CreateMaybeMessage<NVMStatsBundle>(NULL);
  }

  NVMStatsBundle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NVMStatsBundle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NVMStatsBundle& from);
  void MergeFrom(const NVMStatsBundle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMStatsBundle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 actual_count_of_execution_instruction = 1;
  void clear_actual_count_of_execution_instruction();
  static const int kActualCountOfExecutionInstructionFieldNumber = 1;
  ::google::protobuf::uint64 actual_count_of_execution_instruction() const;
  void set_actual_count_of_execution_instruction(::google::protobuf::uint64 value);

  // uint64 actual_used_mem_size = 2;
  void clear_actual_used_mem_size();
  static const int kActualUsedMemSizeFieldNumber = 2;
  ::google::protobuf::uint64 actual_used_mem_size() const;
  void set_actual_used_mem_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NVMStatsBundle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 actual_count_of_execution_instruction_;
  ::google::protobuf::uint64 actual_used_mem_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nvm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NVMFinalResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVMFinalResponse) */ {
 public:
  NVMFinalResponse();
  virtual ~NVMFinalResponse();

  NVMFinalResponse(const NVMFinalResponse& from);

  inline NVMFinalResponse& operator=(const NVMFinalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NVMFinalResponse(NVMFinalResponse&& from) noexcept
    : NVMFinalResponse() {
    *this = ::std::move(from);
  }

  inline NVMFinalResponse& operator=(NVMFinalResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NVMFinalResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NVMFinalResponse* internal_default_instance() {
    return reinterpret_cast<const NVMFinalResponse*>(
               &_NVMFinalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NVMFinalResponse* other);
  friend void swap(NVMFinalResponse& a, NVMFinalResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NVMFinalResponse* New() const final {
    return CreateMaybeMessage<NVMFinalResponse>(NULL);
  }

  NVMFinalResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NVMFinalResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NVMFinalResponse& from);
  void MergeFrom(const NVMFinalResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMFinalResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .NVMStatsBundle stats_bundle = 3;
  bool has_stats_bundle() const;
  void clear_stats_bundle();
  static const int kStatsBundleFieldNumber = 3;
  private:
  const ::NVMStatsBundle& _internal_stats_bundle() const;
  public:
  const ::NVMStatsBundle& stats_bundle() const;
  ::NVMStatsBundle* release_stats_bundle();
  ::NVMStatsBundle* mutable_stats_bundle();
  void set_allocated_stats_bundle(::NVMStatsBundle* stats_bundle);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NVMFinalResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::NVMStatsBundle* stats_bundle_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nvm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NVMCallbackResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVMCallbackResponse) */ {
 public:
  NVMCallbackResponse();
  virtual ~NVMCallbackResponse();

  NVMCallbackResponse(const NVMCallbackResponse& from);

  inline NVMCallbackResponse& operator=(const NVMCallbackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NVMCallbackResponse(NVMCallbackResponse&& from) noexcept
    : NVMCallbackResponse() {
    *this = ::std::move(from);
  }

  inline NVMCallbackResponse& operator=(NVMCallbackResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NVMCallbackResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NVMCallbackResponse* internal_default_instance() {
    return reinterpret_cast<const NVMCallbackResponse*>(
               &_NVMCallbackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NVMCallbackResponse* other);
  friend void swap(NVMCallbackResponse& a, NVMCallbackResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NVMCallbackResponse* New() const final {
    return CreateMaybeMessage<NVMCallbackResponse>(NULL);
  }

  NVMCallbackResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NVMCallbackResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NVMCallbackResponse& from);
  void MergeFrom(const NVMCallbackResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMCallbackResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string func_params = 2;
  int func_params_size() const;
  void clear_func_params();
  static const int kFuncParamsFieldNumber = 2;
  const ::std::string& func_params(int index) const;
  ::std::string* mutable_func_params(int index);
  void set_func_params(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_func_params(int index, ::std::string&& value);
  #endif
  void set_func_params(int index, const char* value);
  void set_func_params(int index, const char* value, size_t size);
  ::std::string* add_func_params();
  void add_func_params(const ::std::string& value);
  #if LANG_CXX11
  void add_func_params(::std::string&& value);
  #endif
  void add_func_params(const char* value);
  void add_func_params(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& func_params() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_func_params();

  // string func_name = 1;
  void clear_func_name();
  static const int kFuncNameFieldNumber = 1;
  const ::std::string& func_name() const;
  void set_func_name(const ::std::string& value);
  #if LANG_CXX11
  void set_func_name(::std::string&& value);
  #endif
  void set_func_name(const char* value);
  void set_func_name(const char* value, size_t size);
  ::std::string* mutable_func_name();
  ::std::string* release_func_name();
  void set_allocated_func_name(::std::string* func_name);

  // @@protoc_insertion_point(class_scope:NVMCallbackResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> func_params_;
  ::google::protobuf::internal::ArenaStringPtr func_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nvm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NVMDataResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVMDataResponse) */ {
 public:
  NVMDataResponse();
  virtual ~NVMDataResponse();

  NVMDataResponse(const NVMDataResponse& from);

  inline NVMDataResponse& operator=(const NVMDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NVMDataResponse(NVMDataResponse&& from) noexcept
    : NVMDataResponse() {
    *this = ::std::move(from);
  }

  inline NVMDataResponse& operator=(NVMDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NVMDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NVMDataResponse* internal_default_instance() {
    return reinterpret_cast<const NVMDataResponse*>(
               &_NVMDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NVMDataResponse* other);
  friend void swap(NVMDataResponse& a, NVMDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NVMDataResponse* New() const final {
    return CreateMaybeMessage<NVMDataResponse>(NULL);
  }

  NVMDataResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NVMDataResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NVMDataResponse& from);
  void MergeFrom(const NVMDataResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string response_type = 1;
  void clear_response_type();
  static const int kResponseTypeFieldNumber = 1;
  const ::std::string& response_type() const;
  void set_response_type(const ::std::string& value);
  #if LANG_CXX11
  void set_response_type(::std::string&& value);
  #endif
  void set_response_type(const char* value);
  void set_response_type(const char* value, size_t size);
  ::std::string* mutable_response_type();
  ::std::string* release_response_type();
  void set_allocated_response_type(::std::string* response_type);

  // .NVMFinalResponse final_response = 5;
  bool has_final_response() const;
  void clear_final_response();
  static const int kFinalResponseFieldNumber = 5;
  private:
  const ::NVMFinalResponse& _internal_final_response() const;
  public:
  const ::NVMFinalResponse& final_response() const;
  ::NVMFinalResponse* release_final_response();
  ::NVMFinalResponse* mutable_final_response();
  void set_allocated_final_response(::NVMFinalResponse* final_response);

  // .NVMCallbackResponse callback_response = 6;
  bool has_callback_response() const;
  void clear_callback_response();
  static const int kCallbackResponseFieldNumber = 6;
  private:
  const ::NVMCallbackResponse& _internal_callback_response() const;
  public:
  const ::NVMCallbackResponse& callback_response() const;
  ::NVMCallbackResponse* release_callback_response();
  ::NVMCallbackResponse* mutable_callback_response();
  void set_allocated_callback_response(::NVMCallbackResponse* callback_response);

  // uint64 lcs_handler = 3;
  void clear_lcs_handler();
  static const int kLcsHandlerFieldNumber = 3;
  ::google::protobuf::uint64 lcs_handler() const;
  void set_lcs_handler(::google::protobuf::uint64 value);

  // uint64 gcs_handler = 4;
  void clear_gcs_handler();
  static const int kGcsHandlerFieldNumber = 4;
  ::google::protobuf::uint64 gcs_handler() const;
  void set_gcs_handler(::google::protobuf::uint64 value);

  // uint32 response_indx = 2;
  void clear_response_indx();
  static const int kResponseIndxFieldNumber = 2;
  ::google::protobuf::uint32 response_indx() const;
  void set_response_indx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NVMDataResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr response_type_;
  ::NVMFinalResponse* final_response_;
  ::NVMCallbackResponse* callback_response_;
  ::google::protobuf::uint64 lcs_handler_;
  ::google::protobuf::uint64 gcs_handler_;
  ::google::protobuf::uint32 response_indx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nvm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NVMConfigBundle

// string script_src = 1;
inline void NVMConfigBundle::clear_script_src() {
  script_src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMConfigBundle::script_src() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.script_src)
  return script_src_.GetNoArena();
}
inline void NVMConfigBundle::set_script_src(const ::std::string& value) {
  
  script_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMConfigBundle.script_src)
}
#if LANG_CXX11
inline void NVMConfigBundle::set_script_src(::std::string&& value) {
  
  script_src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMConfigBundle.script_src)
}
#endif
inline void NVMConfigBundle::set_script_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  script_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMConfigBundle.script_src)
}
inline void NVMConfigBundle::set_script_src(const char* value, size_t size) {
  
  script_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMConfigBundle.script_src)
}
inline ::std::string* NVMConfigBundle::mutable_script_src() {
  
  // @@protoc_insertion_point(field_mutable:NVMConfigBundle.script_src)
  return script_src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMConfigBundle::release_script_src() {
  // @@protoc_insertion_point(field_release:NVMConfigBundle.script_src)
  
  return script_src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMConfigBundle::set_allocated_script_src(::std::string* script_src) {
  if (script_src != NULL) {
    
  } else {
    
  }
  script_src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_src);
  // @@protoc_insertion_point(field_set_allocated:NVMConfigBundle.script_src)
}

// string script_type = 2;
inline void NVMConfigBundle::clear_script_type() {
  script_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMConfigBundle::script_type() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.script_type)
  return script_type_.GetNoArena();
}
inline void NVMConfigBundle::set_script_type(const ::std::string& value) {
  
  script_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMConfigBundle.script_type)
}
#if LANG_CXX11
inline void NVMConfigBundle::set_script_type(::std::string&& value) {
  
  script_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMConfigBundle.script_type)
}
#endif
inline void NVMConfigBundle::set_script_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  script_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMConfigBundle.script_type)
}
inline void NVMConfigBundle::set_script_type(const char* value, size_t size) {
  
  script_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMConfigBundle.script_type)
}
inline ::std::string* NVMConfigBundle::mutable_script_type() {
  
  // @@protoc_insertion_point(field_mutable:NVMConfigBundle.script_type)
  return script_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMConfigBundle::release_script_type() {
  // @@protoc_insertion_point(field_release:NVMConfigBundle.script_type)
  
  return script_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMConfigBundle::set_allocated_script_type(::std::string* script_type) {
  if (script_type != NULL) {
    
  } else {
    
  }
  script_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_type);
  // @@protoc_insertion_point(field_set_allocated:NVMConfigBundle.script_type)
}

// string runnable_src = 3;
inline void NVMConfigBundle::clear_runnable_src() {
  runnable_src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMConfigBundle::runnable_src() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.runnable_src)
  return runnable_src_.GetNoArena();
}
inline void NVMConfigBundle::set_runnable_src(const ::std::string& value) {
  
  runnable_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMConfigBundle.runnable_src)
}
#if LANG_CXX11
inline void NVMConfigBundle::set_runnable_src(::std::string&& value) {
  
  runnable_src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMConfigBundle.runnable_src)
}
#endif
inline void NVMConfigBundle::set_runnable_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  runnable_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMConfigBundle.runnable_src)
}
inline void NVMConfigBundle::set_runnable_src(const char* value, size_t size) {
  
  runnable_src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMConfigBundle.runnable_src)
}
inline ::std::string* NVMConfigBundle::mutable_runnable_src() {
  
  // @@protoc_insertion_point(field_mutable:NVMConfigBundle.runnable_src)
  return runnable_src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMConfigBundle::release_runnable_src() {
  // @@protoc_insertion_point(field_release:NVMConfigBundle.runnable_src)
  
  return runnable_src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMConfigBundle::set_allocated_runnable_src(::std::string* runnable_src) {
  if (runnable_src != NULL) {
    
  } else {
    
  }
  runnable_src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runnable_src);
  // @@protoc_insertion_point(field_set_allocated:NVMConfigBundle.runnable_src)
}

// string block_json = 4;
inline void NVMConfigBundle::clear_block_json() {
  block_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMConfigBundle::block_json() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.block_json)
  return block_json_.GetNoArena();
}
inline void NVMConfigBundle::set_block_json(const ::std::string& value) {
  
  block_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMConfigBundle.block_json)
}
#if LANG_CXX11
inline void NVMConfigBundle::set_block_json(::std::string&& value) {
  
  block_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMConfigBundle.block_json)
}
#endif
inline void NVMConfigBundle::set_block_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  block_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMConfigBundle.block_json)
}
inline void NVMConfigBundle::set_block_json(const char* value, size_t size) {
  
  block_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMConfigBundle.block_json)
}
inline ::std::string* NVMConfigBundle::mutable_block_json() {
  
  // @@protoc_insertion_point(field_mutable:NVMConfigBundle.block_json)
  return block_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMConfigBundle::release_block_json() {
  // @@protoc_insertion_point(field_release:NVMConfigBundle.block_json)
  
  return block_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMConfigBundle::set_allocated_block_json(::std::string* block_json) {
  if (block_json != NULL) {
    
  } else {
    
  }
  block_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_json);
  // @@protoc_insertion_point(field_set_allocated:NVMConfigBundle.block_json)
}

// string tx_json = 5;
inline void NVMConfigBundle::clear_tx_json() {
  tx_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMConfigBundle::tx_json() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.tx_json)
  return tx_json_.GetNoArena();
}
inline void NVMConfigBundle::set_tx_json(const ::std::string& value) {
  
  tx_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMConfigBundle.tx_json)
}
#if LANG_CXX11
inline void NVMConfigBundle::set_tx_json(::std::string&& value) {
  
  tx_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMConfigBundle.tx_json)
}
#endif
inline void NVMConfigBundle::set_tx_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tx_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMConfigBundle.tx_json)
}
inline void NVMConfigBundle::set_tx_json(const char* value, size_t size) {
  
  tx_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMConfigBundle.tx_json)
}
inline ::std::string* NVMConfigBundle::mutable_tx_json() {
  
  // @@protoc_insertion_point(field_mutable:NVMConfigBundle.tx_json)
  return tx_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMConfigBundle::release_tx_json() {
  // @@protoc_insertion_point(field_release:NVMConfigBundle.tx_json)
  
  return tx_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMConfigBundle::set_allocated_tx_json(::std::string* tx_json) {
  if (tx_json != NULL) {
    
  } else {
    
  }
  tx_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_json);
  // @@protoc_insertion_point(field_set_allocated:NVMConfigBundle.tx_json)
}

// string module_id = 6;
inline void NVMConfigBundle::clear_module_id() {
  module_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMConfigBundle::module_id() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.module_id)
  return module_id_.GetNoArena();
}
inline void NVMConfigBundle::set_module_id(const ::std::string& value) {
  
  module_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMConfigBundle.module_id)
}
#if LANG_CXX11
inline void NVMConfigBundle::set_module_id(::std::string&& value) {
  
  module_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMConfigBundle.module_id)
}
#endif
inline void NVMConfigBundle::set_module_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMConfigBundle.module_id)
}
inline void NVMConfigBundle::set_module_id(const char* value, size_t size) {
  
  module_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMConfigBundle.module_id)
}
inline ::std::string* NVMConfigBundle::mutable_module_id() {
  
  // @@protoc_insertion_point(field_mutable:NVMConfigBundle.module_id)
  return module_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMConfigBundle::release_module_id() {
  // @@protoc_insertion_point(field_release:NVMConfigBundle.module_id)
  
  return module_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMConfigBundle::set_allocated_module_id(::std::string* module_id) {
  if (module_id != NULL) {
    
  } else {
    
  }
  module_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_id);
  // @@protoc_insertion_point(field_set_allocated:NVMConfigBundle.module_id)
}

// uint64 block_height = 7;
inline void NVMConfigBundle::clear_block_height() {
  block_height_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMConfigBundle::block_height() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.block_height)
  return block_height_;
}
inline void NVMConfigBundle::set_block_height(::google::protobuf::uint64 value) {
  
  block_height_ = value;
  // @@protoc_insertion_point(field_set:NVMConfigBundle.block_height)
}

// uint32 chain_id = 8;
inline void NVMConfigBundle::clear_chain_id() {
  chain_id_ = 0u;
}
inline ::google::protobuf::uint32 NVMConfigBundle::chain_id() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.chain_id)
  return chain_id_;
}
inline void NVMConfigBundle::set_chain_id(::google::protobuf::uint32 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:NVMConfigBundle.chain_id)
}

// bool enable_limits = 9;
inline void NVMConfigBundle::clear_enable_limits() {
  enable_limits_ = false;
}
inline bool NVMConfigBundle::enable_limits() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.enable_limits)
  return enable_limits_;
}
inline void NVMConfigBundle::set_enable_limits(bool value) {
  
  enable_limits_ = value;
  // @@protoc_insertion_point(field_set:NVMConfigBundle.enable_limits)
}

// uint64 limits_exe_instruction = 10;
inline void NVMConfigBundle::clear_limits_exe_instruction() {
  limits_exe_instruction_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMConfigBundle::limits_exe_instruction() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.limits_exe_instruction)
  return limits_exe_instruction_;
}
inline void NVMConfigBundle::set_limits_exe_instruction(::google::protobuf::uint64 value) {
  
  limits_exe_instruction_ = value;
  // @@protoc_insertion_point(field_set:NVMConfigBundle.limits_exe_instruction)
}

// uint64 limits_total_mem_size = 11;
inline void NVMConfigBundle::clear_limits_total_mem_size() {
  limits_total_mem_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMConfigBundle::limits_total_mem_size() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.limits_total_mem_size)
  return limits_total_mem_size_;
}
inline void NVMConfigBundle::set_limits_total_mem_size(::google::protobuf::uint64 value) {
  
  limits_total_mem_size_ = value;
  // @@protoc_insertion_point(field_set:NVMConfigBundle.limits_total_mem_size)
}

// uint64 execution_timeout = 12;
inline void NVMConfigBundle::clear_execution_timeout() {
  execution_timeout_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMConfigBundle::execution_timeout() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.execution_timeout)
  return execution_timeout_;
}
inline void NVMConfigBundle::set_execution_timeout(::google::protobuf::uint64 value) {
  
  execution_timeout_ = value;
  // @@protoc_insertion_point(field_set:NVMConfigBundle.execution_timeout)
}

// uint64 timeout_gas_limit_cost = 13;
inline void NVMConfigBundle::clear_timeout_gas_limit_cost() {
  timeout_gas_limit_cost_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMConfigBundle::timeout_gas_limit_cost() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.timeout_gas_limit_cost)
  return timeout_gas_limit_cost_;
}
inline void NVMConfigBundle::set_timeout_gas_limit_cost(::google::protobuf::uint64 value) {
  
  timeout_gas_limit_cost_ = value;
  // @@protoc_insertion_point(field_set:NVMConfigBundle.timeout_gas_limit_cost)
}

// uint64 max_limits_of_execution_instruction = 14;
inline void NVMConfigBundle::clear_max_limits_of_execution_instruction() {
  max_limits_of_execution_instruction_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMConfigBundle::max_limits_of_execution_instruction() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.max_limits_of_execution_instruction)
  return max_limits_of_execution_instruction_;
}
inline void NVMConfigBundle::set_max_limits_of_execution_instruction(::google::protobuf::uint64 value) {
  
  max_limits_of_execution_instruction_ = value;
  // @@protoc_insertion_point(field_set:NVMConfigBundle.max_limits_of_execution_instruction)
}

// uint64 default_limits_of_total_mem_size = 15;
inline void NVMConfigBundle::clear_default_limits_of_total_mem_size() {
  default_limits_of_total_mem_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMConfigBundle::default_limits_of_total_mem_size() const {
  // @@protoc_insertion_point(field_get:NVMConfigBundle.default_limits_of_total_mem_size)
  return default_limits_of_total_mem_size_;
}
inline void NVMConfigBundle::set_default_limits_of_total_mem_size(::google::protobuf::uint64 value) {
  
  default_limits_of_total_mem_size_ = value;
  // @@protoc_insertion_point(field_set:NVMConfigBundle.default_limits_of_total_mem_size)
}

// -------------------------------------------------------------------

// NVMCallbackResult

// string func_name = 1;
inline void NVMCallbackResult::clear_func_name() {
  func_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMCallbackResult::func_name() const {
  // @@protoc_insertion_point(field_get:NVMCallbackResult.func_name)
  return func_name_.GetNoArena();
}
inline void NVMCallbackResult::set_func_name(const ::std::string& value) {
  
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMCallbackResult.func_name)
}
#if LANG_CXX11
inline void NVMCallbackResult::set_func_name(::std::string&& value) {
  
  func_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMCallbackResult.func_name)
}
#endif
inline void NVMCallbackResult::set_func_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMCallbackResult.func_name)
}
inline void NVMCallbackResult::set_func_name(const char* value, size_t size) {
  
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMCallbackResult.func_name)
}
inline ::std::string* NVMCallbackResult::mutable_func_name() {
  
  // @@protoc_insertion_point(field_mutable:NVMCallbackResult.func_name)
  return func_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMCallbackResult::release_func_name() {
  // @@protoc_insertion_point(field_release:NVMCallbackResult.func_name)
  
  return func_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMCallbackResult::set_allocated_func_name(::std::string* func_name) {
  if (func_name != NULL) {
    
  } else {
    
  }
  func_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func_name);
  // @@protoc_insertion_point(field_set_allocated:NVMCallbackResult.func_name)
}

// string result = 2;
inline void NVMCallbackResult::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMCallbackResult::result() const {
  // @@protoc_insertion_point(field_get:NVMCallbackResult.result)
  return result_.GetNoArena();
}
inline void NVMCallbackResult::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMCallbackResult.result)
}
#if LANG_CXX11
inline void NVMCallbackResult::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMCallbackResult.result)
}
#endif
inline void NVMCallbackResult::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMCallbackResult.result)
}
inline void NVMCallbackResult::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMCallbackResult.result)
}
inline ::std::string* NVMCallbackResult::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:NVMCallbackResult.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMCallbackResult::release_result() {
  // @@protoc_insertion_point(field_release:NVMCallbackResult.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMCallbackResult::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:NVMCallbackResult.result)
}

// repeated string extra = 3;
inline int NVMCallbackResult::extra_size() const {
  return extra_.size();
}
inline void NVMCallbackResult::clear_extra() {
  extra_.Clear();
}
inline const ::std::string& NVMCallbackResult::extra(int index) const {
  // @@protoc_insertion_point(field_get:NVMCallbackResult.extra)
  return extra_.Get(index);
}
inline ::std::string* NVMCallbackResult::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:NVMCallbackResult.extra)
  return extra_.Mutable(index);
}
inline void NVMCallbackResult::set_extra(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NVMCallbackResult.extra)
  extra_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NVMCallbackResult::set_extra(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NVMCallbackResult.extra)
  extra_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NVMCallbackResult::set_extra(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NVMCallbackResult.extra)
}
inline void NVMCallbackResult::set_extra(int index, const char* value, size_t size) {
  extra_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NVMCallbackResult.extra)
}
inline ::std::string* NVMCallbackResult::add_extra() {
  // @@protoc_insertion_point(field_add_mutable:NVMCallbackResult.extra)
  return extra_.Add();
}
inline void NVMCallbackResult::add_extra(const ::std::string& value) {
  extra_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NVMCallbackResult.extra)
}
#if LANG_CXX11
inline void NVMCallbackResult::add_extra(::std::string&& value) {
  extra_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NVMCallbackResult.extra)
}
#endif
inline void NVMCallbackResult::add_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NVMCallbackResult.extra)
}
inline void NVMCallbackResult::add_extra(const char* value, size_t size) {
  extra_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NVMCallbackResult.extra)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NVMCallbackResult::extra() const {
  // @@protoc_insertion_point(field_list:NVMCallbackResult.extra)
  return extra_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NVMCallbackResult::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:NVMCallbackResult.extra)
  return &extra_;
}

// -------------------------------------------------------------------

// NVMDataRequest

// string request_type = 1;
inline void NVMDataRequest::clear_request_type() {
  request_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMDataRequest::request_type() const {
  // @@protoc_insertion_point(field_get:NVMDataRequest.request_type)
  return request_type_.GetNoArena();
}
inline void NVMDataRequest::set_request_type(const ::std::string& value) {
  
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMDataRequest.request_type)
}
#if LANG_CXX11
inline void NVMDataRequest::set_request_type(::std::string&& value) {
  
  request_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMDataRequest.request_type)
}
#endif
inline void NVMDataRequest::set_request_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMDataRequest.request_type)
}
inline void NVMDataRequest::set_request_type(const char* value, size_t size) {
  
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMDataRequest.request_type)
}
inline ::std::string* NVMDataRequest::mutable_request_type() {
  
  // @@protoc_insertion_point(field_mutable:NVMDataRequest.request_type)
  return request_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMDataRequest::release_request_type() {
  // @@protoc_insertion_point(field_release:NVMDataRequest.request_type)
  
  return request_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMDataRequest::set_allocated_request_type(::std::string* request_type) {
  if (request_type != NULL) {
    
  } else {
    
  }
  request_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_type);
  // @@protoc_insertion_point(field_set_allocated:NVMDataRequest.request_type)
}

// uint32 request_indx = 2;
inline void NVMDataRequest::clear_request_indx() {
  request_indx_ = 0u;
}
inline ::google::protobuf::uint32 NVMDataRequest::request_indx() const {
  // @@protoc_insertion_point(field_get:NVMDataRequest.request_indx)
  return request_indx_;
}
inline void NVMDataRequest::set_request_indx(::google::protobuf::uint32 value) {
  
  request_indx_ = value;
  // @@protoc_insertion_point(field_set:NVMDataRequest.request_indx)
}

// uint64 lcs_handler = 3;
inline void NVMDataRequest::clear_lcs_handler() {
  lcs_handler_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMDataRequest::lcs_handler() const {
  // @@protoc_insertion_point(field_get:NVMDataRequest.lcs_handler)
  return lcs_handler_;
}
inline void NVMDataRequest::set_lcs_handler(::google::protobuf::uint64 value) {
  
  lcs_handler_ = value;
  // @@protoc_insertion_point(field_set:NVMDataRequest.lcs_handler)
}

// uint64 gcs_handler = 4;
inline void NVMDataRequest::clear_gcs_handler() {
  gcs_handler_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMDataRequest::gcs_handler() const {
  // @@protoc_insertion_point(field_get:NVMDataRequest.gcs_handler)
  return gcs_handler_;
}
inline void NVMDataRequest::set_gcs_handler(::google::protobuf::uint64 value) {
  
  gcs_handler_ = value;
  // @@protoc_insertion_point(field_set:NVMDataRequest.gcs_handler)
}

// .NVMCallbackResult callback_result = 5;
inline bool NVMDataRequest::has_callback_result() const {
  return this != internal_default_instance() && callback_result_ != NULL;
}
inline void NVMDataRequest::clear_callback_result() {
  if (GetArenaNoVirtual() == NULL && callback_result_ != NULL) {
    delete callback_result_;
  }
  callback_result_ = NULL;
}
inline const ::NVMCallbackResult& NVMDataRequest::_internal_callback_result() const {
  return *callback_result_;
}
inline const ::NVMCallbackResult& NVMDataRequest::callback_result() const {
  const ::NVMCallbackResult* p = callback_result_;
  // @@protoc_insertion_point(field_get:NVMDataRequest.callback_result)
  return p != NULL ? *p : *reinterpret_cast<const ::NVMCallbackResult*>(
      &::_NVMCallbackResult_default_instance_);
}
inline ::NVMCallbackResult* NVMDataRequest::release_callback_result() {
  // @@protoc_insertion_point(field_release:NVMDataRequest.callback_result)
  
  ::NVMCallbackResult* temp = callback_result_;
  callback_result_ = NULL;
  return temp;
}
inline ::NVMCallbackResult* NVMDataRequest::mutable_callback_result() {
  
  if (callback_result_ == NULL) {
    auto* p = CreateMaybeMessage<::NVMCallbackResult>(GetArenaNoVirtual());
    callback_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVMDataRequest.callback_result)
  return callback_result_;
}
inline void NVMDataRequest::set_allocated_callback_result(::NVMCallbackResult* callback_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete callback_result_;
  }
  if (callback_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      callback_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, callback_result, submessage_arena);
    }
    
  } else {
    
  }
  callback_result_ = callback_result;
  // @@protoc_insertion_point(field_set_allocated:NVMDataRequest.callback_result)
}

// .NVMConfigBundle config_bundle = 6;
inline bool NVMDataRequest::has_config_bundle() const {
  return this != internal_default_instance() && config_bundle_ != NULL;
}
inline void NVMDataRequest::clear_config_bundle() {
  if (GetArenaNoVirtual() == NULL && config_bundle_ != NULL) {
    delete config_bundle_;
  }
  config_bundle_ = NULL;
}
inline const ::NVMConfigBundle& NVMDataRequest::_internal_config_bundle() const {
  return *config_bundle_;
}
inline const ::NVMConfigBundle& NVMDataRequest::config_bundle() const {
  const ::NVMConfigBundle* p = config_bundle_;
  // @@protoc_insertion_point(field_get:NVMDataRequest.config_bundle)
  return p != NULL ? *p : *reinterpret_cast<const ::NVMConfigBundle*>(
      &::_NVMConfigBundle_default_instance_);
}
inline ::NVMConfigBundle* NVMDataRequest::release_config_bundle() {
  // @@protoc_insertion_point(field_release:NVMDataRequest.config_bundle)
  
  ::NVMConfigBundle* temp = config_bundle_;
  config_bundle_ = NULL;
  return temp;
}
inline ::NVMConfigBundle* NVMDataRequest::mutable_config_bundle() {
  
  if (config_bundle_ == NULL) {
    auto* p = CreateMaybeMessage<::NVMConfigBundle>(GetArenaNoVirtual());
    config_bundle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVMDataRequest.config_bundle)
  return config_bundle_;
}
inline void NVMDataRequest::set_allocated_config_bundle(::NVMConfigBundle* config_bundle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_bundle_;
  }
  if (config_bundle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config_bundle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config_bundle, submessage_arena);
    }
    
  } else {
    
  }
  config_bundle_ = config_bundle;
  // @@protoc_insertion_point(field_set_allocated:NVMDataRequest.config_bundle)
}

// -------------------------------------------------------------------

// NVMStatsBundle

// uint64 actual_count_of_execution_instruction = 1;
inline void NVMStatsBundle::clear_actual_count_of_execution_instruction() {
  actual_count_of_execution_instruction_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMStatsBundle::actual_count_of_execution_instruction() const {
  // @@protoc_insertion_point(field_get:NVMStatsBundle.actual_count_of_execution_instruction)
  return actual_count_of_execution_instruction_;
}
inline void NVMStatsBundle::set_actual_count_of_execution_instruction(::google::protobuf::uint64 value) {
  
  actual_count_of_execution_instruction_ = value;
  // @@protoc_insertion_point(field_set:NVMStatsBundle.actual_count_of_execution_instruction)
}

// uint64 actual_used_mem_size = 2;
inline void NVMStatsBundle::clear_actual_used_mem_size() {
  actual_used_mem_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMStatsBundle::actual_used_mem_size() const {
  // @@protoc_insertion_point(field_get:NVMStatsBundle.actual_used_mem_size)
  return actual_used_mem_size_;
}
inline void NVMStatsBundle::set_actual_used_mem_size(::google::protobuf::uint64 value) {
  
  actual_used_mem_size_ = value;
  // @@protoc_insertion_point(field_set:NVMStatsBundle.actual_used_mem_size)
}

// -------------------------------------------------------------------

// NVMFinalResponse

// int32 result = 1;
inline void NVMFinalResponse::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 NVMFinalResponse::result() const {
  // @@protoc_insertion_point(field_get:NVMFinalResponse.result)
  return result_;
}
inline void NVMFinalResponse::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NVMFinalResponse.result)
}

// string msg = 2;
inline void NVMFinalResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMFinalResponse::msg() const {
  // @@protoc_insertion_point(field_get:NVMFinalResponse.msg)
  return msg_.GetNoArena();
}
inline void NVMFinalResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMFinalResponse.msg)
}
#if LANG_CXX11
inline void NVMFinalResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMFinalResponse.msg)
}
#endif
inline void NVMFinalResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMFinalResponse.msg)
}
inline void NVMFinalResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMFinalResponse.msg)
}
inline ::std::string* NVMFinalResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:NVMFinalResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMFinalResponse::release_msg() {
  // @@protoc_insertion_point(field_release:NVMFinalResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMFinalResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NVMFinalResponse.msg)
}

// .NVMStatsBundle stats_bundle = 3;
inline bool NVMFinalResponse::has_stats_bundle() const {
  return this != internal_default_instance() && stats_bundle_ != NULL;
}
inline void NVMFinalResponse::clear_stats_bundle() {
  if (GetArenaNoVirtual() == NULL && stats_bundle_ != NULL) {
    delete stats_bundle_;
  }
  stats_bundle_ = NULL;
}
inline const ::NVMStatsBundle& NVMFinalResponse::_internal_stats_bundle() const {
  return *stats_bundle_;
}
inline const ::NVMStatsBundle& NVMFinalResponse::stats_bundle() const {
  const ::NVMStatsBundle* p = stats_bundle_;
  // @@protoc_insertion_point(field_get:NVMFinalResponse.stats_bundle)
  return p != NULL ? *p : *reinterpret_cast<const ::NVMStatsBundle*>(
      &::_NVMStatsBundle_default_instance_);
}
inline ::NVMStatsBundle* NVMFinalResponse::release_stats_bundle() {
  // @@protoc_insertion_point(field_release:NVMFinalResponse.stats_bundle)
  
  ::NVMStatsBundle* temp = stats_bundle_;
  stats_bundle_ = NULL;
  return temp;
}
inline ::NVMStatsBundle* NVMFinalResponse::mutable_stats_bundle() {
  
  if (stats_bundle_ == NULL) {
    auto* p = CreateMaybeMessage<::NVMStatsBundle>(GetArenaNoVirtual());
    stats_bundle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVMFinalResponse.stats_bundle)
  return stats_bundle_;
}
inline void NVMFinalResponse::set_allocated_stats_bundle(::NVMStatsBundle* stats_bundle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stats_bundle_;
  }
  if (stats_bundle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stats_bundle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stats_bundle, submessage_arena);
    }
    
  } else {
    
  }
  stats_bundle_ = stats_bundle;
  // @@protoc_insertion_point(field_set_allocated:NVMFinalResponse.stats_bundle)
}

// -------------------------------------------------------------------

// NVMCallbackResponse

// string func_name = 1;
inline void NVMCallbackResponse::clear_func_name() {
  func_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMCallbackResponse::func_name() const {
  // @@protoc_insertion_point(field_get:NVMCallbackResponse.func_name)
  return func_name_.GetNoArena();
}
inline void NVMCallbackResponse::set_func_name(const ::std::string& value) {
  
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMCallbackResponse.func_name)
}
#if LANG_CXX11
inline void NVMCallbackResponse::set_func_name(::std::string&& value) {
  
  func_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMCallbackResponse.func_name)
}
#endif
inline void NVMCallbackResponse::set_func_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMCallbackResponse.func_name)
}
inline void NVMCallbackResponse::set_func_name(const char* value, size_t size) {
  
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMCallbackResponse.func_name)
}
inline ::std::string* NVMCallbackResponse::mutable_func_name() {
  
  // @@protoc_insertion_point(field_mutable:NVMCallbackResponse.func_name)
  return func_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMCallbackResponse::release_func_name() {
  // @@protoc_insertion_point(field_release:NVMCallbackResponse.func_name)
  
  return func_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMCallbackResponse::set_allocated_func_name(::std::string* func_name) {
  if (func_name != NULL) {
    
  } else {
    
  }
  func_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func_name);
  // @@protoc_insertion_point(field_set_allocated:NVMCallbackResponse.func_name)
}

// repeated string func_params = 2;
inline int NVMCallbackResponse::func_params_size() const {
  return func_params_.size();
}
inline void NVMCallbackResponse::clear_func_params() {
  func_params_.Clear();
}
inline const ::std::string& NVMCallbackResponse::func_params(int index) const {
  // @@protoc_insertion_point(field_get:NVMCallbackResponse.func_params)
  return func_params_.Get(index);
}
inline ::std::string* NVMCallbackResponse::mutable_func_params(int index) {
  // @@protoc_insertion_point(field_mutable:NVMCallbackResponse.func_params)
  return func_params_.Mutable(index);
}
inline void NVMCallbackResponse::set_func_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NVMCallbackResponse.func_params)
  func_params_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NVMCallbackResponse::set_func_params(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NVMCallbackResponse.func_params)
  func_params_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NVMCallbackResponse::set_func_params(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  func_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NVMCallbackResponse.func_params)
}
inline void NVMCallbackResponse::set_func_params(int index, const char* value, size_t size) {
  func_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NVMCallbackResponse.func_params)
}
inline ::std::string* NVMCallbackResponse::add_func_params() {
  // @@protoc_insertion_point(field_add_mutable:NVMCallbackResponse.func_params)
  return func_params_.Add();
}
inline void NVMCallbackResponse::add_func_params(const ::std::string& value) {
  func_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NVMCallbackResponse.func_params)
}
#if LANG_CXX11
inline void NVMCallbackResponse::add_func_params(::std::string&& value) {
  func_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NVMCallbackResponse.func_params)
}
#endif
inline void NVMCallbackResponse::add_func_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  func_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NVMCallbackResponse.func_params)
}
inline void NVMCallbackResponse::add_func_params(const char* value, size_t size) {
  func_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NVMCallbackResponse.func_params)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NVMCallbackResponse::func_params() const {
  // @@protoc_insertion_point(field_list:NVMCallbackResponse.func_params)
  return func_params_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NVMCallbackResponse::mutable_func_params() {
  // @@protoc_insertion_point(field_mutable_list:NVMCallbackResponse.func_params)
  return &func_params_;
}

// -------------------------------------------------------------------

// NVMDataResponse

// string response_type = 1;
inline void NVMDataResponse::clear_response_type() {
  response_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NVMDataResponse::response_type() const {
  // @@protoc_insertion_point(field_get:NVMDataResponse.response_type)
  return response_type_.GetNoArena();
}
inline void NVMDataResponse::set_response_type(const ::std::string& value) {
  
  response_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMDataResponse.response_type)
}
#if LANG_CXX11
inline void NVMDataResponse::set_response_type(::std::string&& value) {
  
  response_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMDataResponse.response_type)
}
#endif
inline void NVMDataResponse::set_response_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMDataResponse.response_type)
}
inline void NVMDataResponse::set_response_type(const char* value, size_t size) {
  
  response_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMDataResponse.response_type)
}
inline ::std::string* NVMDataResponse::mutable_response_type() {
  
  // @@protoc_insertion_point(field_mutable:NVMDataResponse.response_type)
  return response_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVMDataResponse::release_response_type() {
  // @@protoc_insertion_point(field_release:NVMDataResponse.response_type)
  
  return response_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVMDataResponse::set_allocated_response_type(::std::string* response_type) {
  if (response_type != NULL) {
    
  } else {
    
  }
  response_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_type);
  // @@protoc_insertion_point(field_set_allocated:NVMDataResponse.response_type)
}

// uint32 response_indx = 2;
inline void NVMDataResponse::clear_response_indx() {
  response_indx_ = 0u;
}
inline ::google::protobuf::uint32 NVMDataResponse::response_indx() const {
  // @@protoc_insertion_point(field_get:NVMDataResponse.response_indx)
  return response_indx_;
}
inline void NVMDataResponse::set_response_indx(::google::protobuf::uint32 value) {
  
  response_indx_ = value;
  // @@protoc_insertion_point(field_set:NVMDataResponse.response_indx)
}

// uint64 lcs_handler = 3;
inline void NVMDataResponse::clear_lcs_handler() {
  lcs_handler_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMDataResponse::lcs_handler() const {
  // @@protoc_insertion_point(field_get:NVMDataResponse.lcs_handler)
  return lcs_handler_;
}
inline void NVMDataResponse::set_lcs_handler(::google::protobuf::uint64 value) {
  
  lcs_handler_ = value;
  // @@protoc_insertion_point(field_set:NVMDataResponse.lcs_handler)
}

// uint64 gcs_handler = 4;
inline void NVMDataResponse::clear_gcs_handler() {
  gcs_handler_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NVMDataResponse::gcs_handler() const {
  // @@protoc_insertion_point(field_get:NVMDataResponse.gcs_handler)
  return gcs_handler_;
}
inline void NVMDataResponse::set_gcs_handler(::google::protobuf::uint64 value) {
  
  gcs_handler_ = value;
  // @@protoc_insertion_point(field_set:NVMDataResponse.gcs_handler)
}

// .NVMFinalResponse final_response = 5;
inline bool NVMDataResponse::has_final_response() const {
  return this != internal_default_instance() && final_response_ != NULL;
}
inline void NVMDataResponse::clear_final_response() {
  if (GetArenaNoVirtual() == NULL && final_response_ != NULL) {
    delete final_response_;
  }
  final_response_ = NULL;
}
inline const ::NVMFinalResponse& NVMDataResponse::_internal_final_response() const {
  return *final_response_;
}
inline const ::NVMFinalResponse& NVMDataResponse::final_response() const {
  const ::NVMFinalResponse* p = final_response_;
  // @@protoc_insertion_point(field_get:NVMDataResponse.final_response)
  return p != NULL ? *p : *reinterpret_cast<const ::NVMFinalResponse*>(
      &::_NVMFinalResponse_default_instance_);
}
inline ::NVMFinalResponse* NVMDataResponse::release_final_response() {
  // @@protoc_insertion_point(field_release:NVMDataResponse.final_response)
  
  ::NVMFinalResponse* temp = final_response_;
  final_response_ = NULL;
  return temp;
}
inline ::NVMFinalResponse* NVMDataResponse::mutable_final_response() {
  
  if (final_response_ == NULL) {
    auto* p = CreateMaybeMessage<::NVMFinalResponse>(GetArenaNoVirtual());
    final_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVMDataResponse.final_response)
  return final_response_;
}
inline void NVMDataResponse::set_allocated_final_response(::NVMFinalResponse* final_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete final_response_;
  }
  if (final_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      final_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, final_response, submessage_arena);
    }
    
  } else {
    
  }
  final_response_ = final_response;
  // @@protoc_insertion_point(field_set_allocated:NVMDataResponse.final_response)
}

// .NVMCallbackResponse callback_response = 6;
inline bool NVMDataResponse::has_callback_response() const {
  return this != internal_default_instance() && callback_response_ != NULL;
}
inline void NVMDataResponse::clear_callback_response() {
  if (GetArenaNoVirtual() == NULL && callback_response_ != NULL) {
    delete callback_response_;
  }
  callback_response_ = NULL;
}
inline const ::NVMCallbackResponse& NVMDataResponse::_internal_callback_response() const {
  return *callback_response_;
}
inline const ::NVMCallbackResponse& NVMDataResponse::callback_response() const {
  const ::NVMCallbackResponse* p = callback_response_;
  // @@protoc_insertion_point(field_get:NVMDataResponse.callback_response)
  return p != NULL ? *p : *reinterpret_cast<const ::NVMCallbackResponse*>(
      &::_NVMCallbackResponse_default_instance_);
}
inline ::NVMCallbackResponse* NVMDataResponse::release_callback_response() {
  // @@protoc_insertion_point(field_release:NVMDataResponse.callback_response)
  
  ::NVMCallbackResponse* temp = callback_response_;
  callback_response_ = NULL;
  return temp;
}
inline ::NVMCallbackResponse* NVMDataResponse::mutable_callback_response() {
  
  if (callback_response_ == NULL) {
    auto* p = CreateMaybeMessage<::NVMCallbackResponse>(GetArenaNoVirtual());
    callback_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVMDataResponse.callback_response)
  return callback_response_;
}
inline void NVMDataResponse::set_allocated_callback_response(::NVMCallbackResponse* callback_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete callback_response_;
  }
  if (callback_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      callback_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, callback_response, submessage_arena);
    }
    
  } else {
    
  }
  callback_response_ = callback_response;
  // @@protoc_insertion_point(field_set_allocated:NVMDataResponse.callback_response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_nvm_2eproto
