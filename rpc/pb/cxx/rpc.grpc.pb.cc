// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto

#include "rpc.pb.h"
#include "rpc.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rpcpb {

static const char* ApiService_method_names[] = {
  "/rpcpb.ApiService/GetNebState",
  "/rpcpb.ApiService/LatestIrreversibleBlock",
  "/rpcpb.ApiService/GetAccountState",
  "/rpcpb.ApiService/Call",
  "/rpcpb.ApiService/SendRawTransaction",
  "/rpcpb.ApiService/GetBlockByHash",
  "/rpcpb.ApiService/GetBlockByHeight",
  "/rpcpb.ApiService/GetTransactionReceipt",
  "/rpcpb.ApiService/GetTransactionByContract",
  "/rpcpb.ApiService/Subscribe",
  "/rpcpb.ApiService/GetGasPrice",
  "/rpcpb.ApiService/EstimateGas",
  "/rpcpb.ApiService/GetEventsByHash",
  "/rpcpb.ApiService/GetDynasty",
};

std::unique_ptr< ApiService::Stub> ApiService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiService::Stub> stub(new ApiService::Stub(channel));
  return stub;
}

ApiService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetNebState_(ApiService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LatestIrreversibleBlock_(ApiService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccountState_(ApiService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Call_(ApiService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendRawTransaction_(ApiService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByHash_(ApiService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByHeight_(ApiService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionReceipt_(ApiService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionByContract_(ApiService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(ApiService_method_names[9], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetGasPrice_(ApiService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EstimateGas_(ApiService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEventsByHash_(ApiService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDynasty_(ApiService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiService::Stub::GetNebState(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::GetNebStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNebState_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GetNebStateResponse>* ApiService::Stub::AsyncGetNebStateRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GetNebStateResponse>::Create(channel_.get(), cq, rpcmethod_GetNebState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GetNebStateResponse>* ApiService::Stub::PrepareAsyncGetNebStateRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GetNebStateResponse>::Create(channel_.get(), cq, rpcmethod_GetNebState_, context, request, false);
}

::grpc::Status ApiService::Stub::LatestIrreversibleBlock(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::BlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LatestIrreversibleBlock_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* ApiService::Stub::AsyncLatestIrreversibleBlockRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::BlockResponse>::Create(channel_.get(), cq, rpcmethod_LatestIrreversibleBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* ApiService::Stub::PrepareAsyncLatestIrreversibleBlockRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::BlockResponse>::Create(channel_.get(), cq, rpcmethod_LatestIrreversibleBlock_, context, request, false);
}

::grpc::Status ApiService::Stub::GetAccountState(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::rpcpb::GetAccountStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAccountState_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GetAccountStateResponse>* ApiService::Stub::AsyncGetAccountStateRaw(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GetAccountStateResponse>::Create(channel_.get(), cq, rpcmethod_GetAccountState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GetAccountStateResponse>* ApiService::Stub::PrepareAsyncGetAccountStateRaw(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GetAccountStateResponse>::Create(channel_.get(), cq, rpcmethod_GetAccountState_, context, request, false);
}

::grpc::Status ApiService::Stub::Call(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::rpcpb::CallResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Call_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::CallResponse>* ApiService::Stub::AsyncCallRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::CallResponse>::Create(channel_.get(), cq, rpcmethod_Call_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::CallResponse>* ApiService::Stub::PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::CallResponse>::Create(channel_.get(), cq, rpcmethod_Call_, context, request, false);
}

::grpc::Status ApiService::Stub::SendRawTransaction(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::rpcpb::SendTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendRawTransaction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* ApiService::Stub::AsyncSendRawTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::SendTransactionResponse>::Create(channel_.get(), cq, rpcmethod_SendRawTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* ApiService::Stub::PrepareAsyncSendRawTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::SendTransactionResponse>::Create(channel_.get(), cq, rpcmethod_SendRawTransaction_, context, request, false);
}

::grpc::Status ApiService::Stub::GetBlockByHash(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::rpcpb::BlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockByHash_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* ApiService::Stub::AsyncGetBlockByHashRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::BlockResponse>::Create(channel_.get(), cq, rpcmethod_GetBlockByHash_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* ApiService::Stub::PrepareAsyncGetBlockByHashRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::BlockResponse>::Create(channel_.get(), cq, rpcmethod_GetBlockByHash_, context, request, false);
}

::grpc::Status ApiService::Stub::GetBlockByHeight(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::rpcpb::BlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockByHeight_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* ApiService::Stub::AsyncGetBlockByHeightRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::BlockResponse>::Create(channel_.get(), cq, rpcmethod_GetBlockByHeight_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* ApiService::Stub::PrepareAsyncGetBlockByHeightRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::BlockResponse>::Create(channel_.get(), cq, rpcmethod_GetBlockByHeight_, context, request, false);
}

::grpc::Status ApiService::Stub::GetTransactionReceipt(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::rpcpb::TransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransactionReceipt_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>* ApiService::Stub::AsyncGetTransactionReceiptRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::TransactionResponse>::Create(channel_.get(), cq, rpcmethod_GetTransactionReceipt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>* ApiService::Stub::PrepareAsyncGetTransactionReceiptRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::TransactionResponse>::Create(channel_.get(), cq, rpcmethod_GetTransactionReceipt_, context, request, false);
}

::grpc::Status ApiService::Stub::GetTransactionByContract(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::rpcpb::TransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransactionByContract_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>* ApiService::Stub::AsyncGetTransactionByContractRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::TransactionResponse>::Create(channel_.get(), cq, rpcmethod_GetTransactionByContract_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>* ApiService::Stub::PrepareAsyncGetTransactionByContractRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::TransactionResponse>::Create(channel_.get(), cq, rpcmethod_GetTransactionByContract_, context, request, false);
}

::grpc::ClientReader< ::rpcpb::SubscribeResponse>* ApiService::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::rpcpb::SubscribeResponse>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

::grpc::ClientAsyncReader< ::rpcpb::SubscribeResponse>* ApiService::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::rpcpb::SubscribeResponse>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::rpcpb::SubscribeResponse>* ApiService::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::rpcpb::SubscribeResponse>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

::grpc::Status ApiService::Stub::GetGasPrice(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::GasPriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGasPrice_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GasPriceResponse>* ApiService::Stub::AsyncGetGasPriceRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GasPriceResponse>::Create(channel_.get(), cq, rpcmethod_GetGasPrice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GasPriceResponse>* ApiService::Stub::PrepareAsyncGetGasPriceRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GasPriceResponse>::Create(channel_.get(), cq, rpcmethod_GetGasPrice_, context, request, false);
}

::grpc::Status ApiService::Stub::EstimateGas(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::rpcpb::GasResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EstimateGas_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GasResponse>* ApiService::Stub::AsyncEstimateGasRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GasResponse>::Create(channel_.get(), cq, rpcmethod_EstimateGas_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GasResponse>* ApiService::Stub::PrepareAsyncEstimateGasRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GasResponse>::Create(channel_.get(), cq, rpcmethod_EstimateGas_, context, request, false);
}

::grpc::Status ApiService::Stub::GetEventsByHash(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::rpcpb::EventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEventsByHash_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::EventsResponse>* ApiService::Stub::AsyncGetEventsByHashRaw(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::EventsResponse>::Create(channel_.get(), cq, rpcmethod_GetEventsByHash_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::EventsResponse>* ApiService::Stub::PrepareAsyncGetEventsByHashRaw(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::EventsResponse>::Create(channel_.get(), cq, rpcmethod_GetEventsByHash_, context, request, false);
}

::grpc::Status ApiService::Stub::GetDynasty(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::rpcpb::GetDynastyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDynasty_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GetDynastyResponse>* ApiService::Stub::AsyncGetDynastyRaw(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GetDynastyResponse>::Create(channel_.get(), cq, rpcmethod_GetDynasty_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GetDynastyResponse>* ApiService::Stub::PrepareAsyncGetDynastyRaw(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GetDynastyResponse>::Create(channel_.get(), cq, rpcmethod_GetDynasty_, context, request, false);
}

ApiService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::NonParamsRequest, ::rpcpb::GetNebStateResponse>(
          std::mem_fn(&ApiService::Service::GetNebState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::NonParamsRequest, ::rpcpb::BlockResponse>(
          std::mem_fn(&ApiService::Service::LatestIrreversibleBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::GetAccountStateRequest, ::rpcpb::GetAccountStateResponse>(
          std::mem_fn(&ApiService::Service::GetAccountState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::TransactionRequest, ::rpcpb::CallResponse>(
          std::mem_fn(&ApiService::Service::Call), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::SendRawTransactionRequest, ::rpcpb::SendTransactionResponse>(
          std::mem_fn(&ApiService::Service::SendRawTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::GetBlockByHashRequest, ::rpcpb::BlockResponse>(
          std::mem_fn(&ApiService::Service::GetBlockByHash), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::GetBlockByHeightRequest, ::rpcpb::BlockResponse>(
          std::mem_fn(&ApiService::Service::GetBlockByHeight), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::GetTransactionByHashRequest, ::rpcpb::TransactionResponse>(
          std::mem_fn(&ApiService::Service::GetTransactionReceipt), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::GetTransactionByContractRequest, ::rpcpb::TransactionResponse>(
          std::mem_fn(&ApiService::Service::GetTransactionByContract), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ApiService::Service, ::rpcpb::SubscribeRequest, ::rpcpb::SubscribeResponse>(
          std::mem_fn(&ApiService::Service::Subscribe), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::NonParamsRequest, ::rpcpb::GasPriceResponse>(
          std::mem_fn(&ApiService::Service::GetGasPrice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::TransactionRequest, ::rpcpb::GasResponse>(
          std::mem_fn(&ApiService::Service::EstimateGas), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::HashRequest, ::rpcpb::EventsResponse>(
          std::mem_fn(&ApiService::Service::GetEventsByHash), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiService::Service, ::rpcpb::ByBlockHeightRequest, ::rpcpb::GetDynastyResponse>(
          std::mem_fn(&ApiService::Service::GetDynasty), this)));
}

ApiService::Service::~Service() {
}

::grpc::Status ApiService::Service::GetNebState(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GetNebStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::LatestIrreversibleBlock(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::BlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::GetAccountState(::grpc::ServerContext* context, const ::rpcpb::GetAccountStateRequest* request, ::rpcpb::GetAccountStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::Call(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::CallResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::SendRawTransaction(::grpc::ServerContext* context, const ::rpcpb::SendRawTransactionRequest* request, ::rpcpb::SendTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::GetBlockByHash(::grpc::ServerContext* context, const ::rpcpb::GetBlockByHashRequest* request, ::rpcpb::BlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::GetBlockByHeight(::grpc::ServerContext* context, const ::rpcpb::GetBlockByHeightRequest* request, ::rpcpb::BlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::GetTransactionReceipt(::grpc::ServerContext* context, const ::rpcpb::GetTransactionByHashRequest* request, ::rpcpb::TransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::GetTransactionByContract(::grpc::ServerContext* context, const ::rpcpb::GetTransactionByContractRequest* request, ::rpcpb::TransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::Subscribe(::grpc::ServerContext* context, const ::rpcpb::SubscribeRequest* request, ::grpc::ServerWriter< ::rpcpb::SubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::GetGasPrice(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GasPriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::EstimateGas(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::GasResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::GetEventsByHash(::grpc::ServerContext* context, const ::rpcpb::HashRequest* request, ::rpcpb::EventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiService::Service::GetDynasty(::grpc::ServerContext* context, const ::rpcpb::ByBlockHeightRequest* request, ::rpcpb::GetDynastyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* AdminService_method_names[] = {
  "/rpcpb.AdminService/Accounts",
  "/rpcpb.AdminService/NewAccount",
  "/rpcpb.AdminService/UnlockAccount",
  "/rpcpb.AdminService/LockAccount",
  "/rpcpb.AdminService/SendTransaction",
  "/rpcpb.AdminService/SignHash",
  "/rpcpb.AdminService/GenerateRandomSeed",
  "/rpcpb.AdminService/SignTransactionWithPassphrase",
  "/rpcpb.AdminService/SendTransactionWithPassphrase",
  "/rpcpb.AdminService/StartPprof",
  "/rpcpb.AdminService/GetConfig",
  "/rpcpb.AdminService/NodeInfo",
};

std::unique_ptr< AdminService::Stub> AdminService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AdminService::Stub> stub(new AdminService::Stub(channel));
  return stub;
}

AdminService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Accounts_(AdminService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewAccount_(AdminService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockAccount_(AdminService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LockAccount_(AdminService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendTransaction_(AdminService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignHash_(AdminService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateRandomSeed_(AdminService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignTransactionWithPassphrase_(AdminService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendTransactionWithPassphrase_(AdminService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartPprof_(AdminService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConfig_(AdminService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NodeInfo_(AdminService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AdminService::Stub::Accounts(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::AccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Accounts_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::AccountsResponse>* AdminService::Stub::AsyncAccountsRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::AccountsResponse>::Create(channel_.get(), cq, rpcmethod_Accounts_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::AccountsResponse>* AdminService::Stub::PrepareAsyncAccountsRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::AccountsResponse>::Create(channel_.get(), cq, rpcmethod_Accounts_, context, request, false);
}

::grpc::Status AdminService::Stub::NewAccount(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::rpcpb::NewAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NewAccount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::NewAccountResponse>* AdminService::Stub::AsyncNewAccountRaw(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::NewAccountResponse>::Create(channel_.get(), cq, rpcmethod_NewAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::NewAccountResponse>* AdminService::Stub::PrepareAsyncNewAccountRaw(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::NewAccountResponse>::Create(channel_.get(), cq, rpcmethod_NewAccount_, context, request, false);
}

::grpc::Status AdminService::Stub::UnlockAccount(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::rpcpb::UnlockAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnlockAccount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::UnlockAccountResponse>* AdminService::Stub::AsyncUnlockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::UnlockAccountResponse>::Create(channel_.get(), cq, rpcmethod_UnlockAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::UnlockAccountResponse>* AdminService::Stub::PrepareAsyncUnlockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::UnlockAccountResponse>::Create(channel_.get(), cq, rpcmethod_UnlockAccount_, context, request, false);
}

::grpc::Status AdminService::Stub::LockAccount(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::rpcpb::LockAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LockAccount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::LockAccountResponse>* AdminService::Stub::AsyncLockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::LockAccountResponse>::Create(channel_.get(), cq, rpcmethod_LockAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::LockAccountResponse>* AdminService::Stub::PrepareAsyncLockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::LockAccountResponse>::Create(channel_.get(), cq, rpcmethod_LockAccount_, context, request, false);
}

::grpc::Status AdminService::Stub::SendTransaction(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::rpcpb::SendTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendTransaction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* AdminService::Stub::AsyncSendTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::SendTransactionResponse>::Create(channel_.get(), cq, rpcmethod_SendTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* AdminService::Stub::PrepareAsyncSendTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::SendTransactionResponse>::Create(channel_.get(), cq, rpcmethod_SendTransaction_, context, request, false);
}

::grpc::Status AdminService::Stub::SignHash(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::rpcpb::SignHashResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignHash_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::SignHashResponse>* AdminService::Stub::AsyncSignHashRaw(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::SignHashResponse>::Create(channel_.get(), cq, rpcmethod_SignHash_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::SignHashResponse>* AdminService::Stub::PrepareAsyncSignHashRaw(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::SignHashResponse>::Create(channel_.get(), cq, rpcmethod_SignHash_, context, request, false);
}

::grpc::Status AdminService::Stub::GenerateRandomSeed(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::rpcpb::GenerateRandomSeedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GenerateRandomSeed_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GenerateRandomSeedResponse>* AdminService::Stub::AsyncGenerateRandomSeedRaw(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GenerateRandomSeedResponse>::Create(channel_.get(), cq, rpcmethod_GenerateRandomSeed_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GenerateRandomSeedResponse>* AdminService::Stub::PrepareAsyncGenerateRandomSeedRaw(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GenerateRandomSeedResponse>::Create(channel_.get(), cq, rpcmethod_GenerateRandomSeed_, context, request, false);
}

::grpc::Status AdminService::Stub::SignTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::rpcpb::SignTransactionPassphraseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignTransactionWithPassphrase_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::SignTransactionPassphraseResponse>* AdminService::Stub::AsyncSignTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::SignTransactionPassphraseResponse>::Create(channel_.get(), cq, rpcmethod_SignTransactionWithPassphrase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::SignTransactionPassphraseResponse>* AdminService::Stub::PrepareAsyncSignTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::SignTransactionPassphraseResponse>::Create(channel_.get(), cq, rpcmethod_SignTransactionWithPassphrase_, context, request, false);
}

::grpc::Status AdminService::Stub::SendTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::rpcpb::SendTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendTransactionWithPassphrase_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* AdminService::Stub::AsyncSendTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::SendTransactionResponse>::Create(channel_.get(), cq, rpcmethod_SendTransactionWithPassphrase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* AdminService::Stub::PrepareAsyncSendTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::SendTransactionResponse>::Create(channel_.get(), cq, rpcmethod_SendTransactionWithPassphrase_, context, request, false);
}

::grpc::Status AdminService::Stub::StartPprof(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::rpcpb::PprofResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartPprof_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::PprofResponse>* AdminService::Stub::AsyncStartPprofRaw(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::PprofResponse>::Create(channel_.get(), cq, rpcmethod_StartPprof_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::PprofResponse>* AdminService::Stub::PrepareAsyncStartPprofRaw(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::PprofResponse>::Create(channel_.get(), cq, rpcmethod_StartPprof_, context, request, false);
}

::grpc::Status AdminService::Stub::GetConfig(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::GetConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GetConfigResponse>* AdminService::Stub::AsyncGetConfigRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GetConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::GetConfigResponse>* AdminService::Stub::PrepareAsyncGetConfigRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::GetConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetConfig_, context, request, false);
}

::grpc::Status AdminService::Stub::NodeInfo(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::NodeInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NodeInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::NodeInfoResponse>* AdminService::Stub::AsyncNodeInfoRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::NodeInfoResponse>::Create(channel_.get(), cq, rpcmethod_NodeInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::NodeInfoResponse>* AdminService::Stub::PrepareAsyncNodeInfoRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::NodeInfoResponse>::Create(channel_.get(), cq, rpcmethod_NodeInfo_, context, request, false);
}

AdminService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::NonParamsRequest, ::rpcpb::AccountsResponse>(
          std::mem_fn(&AdminService::Service::Accounts), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::NewAccountRequest, ::rpcpb::NewAccountResponse>(
          std::mem_fn(&AdminService::Service::NewAccount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::UnlockAccountRequest, ::rpcpb::UnlockAccountResponse>(
          std::mem_fn(&AdminService::Service::UnlockAccount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::LockAccountRequest, ::rpcpb::LockAccountResponse>(
          std::mem_fn(&AdminService::Service::LockAccount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::TransactionRequest, ::rpcpb::SendTransactionResponse>(
          std::mem_fn(&AdminService::Service::SendTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::SignHashRequest, ::rpcpb::SignHashResponse>(
          std::mem_fn(&AdminService::Service::SignHash), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::GenerateRandomSeedRequest, ::rpcpb::GenerateRandomSeedResponse>(
          std::mem_fn(&AdminService::Service::GenerateRandomSeed), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::SignTransactionPassphraseRequest, ::rpcpb::SignTransactionPassphraseResponse>(
          std::mem_fn(&AdminService::Service::SignTransactionWithPassphrase), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::SendTransactionPassphraseRequest, ::rpcpb::SendTransactionResponse>(
          std::mem_fn(&AdminService::Service::SendTransactionWithPassphrase), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::PprofRequest, ::rpcpb::PprofResponse>(
          std::mem_fn(&AdminService::Service::StartPprof), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::NonParamsRequest, ::rpcpb::GetConfigResponse>(
          std::mem_fn(&AdminService::Service::GetConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::rpcpb::NonParamsRequest, ::rpcpb::NodeInfoResponse>(
          std::mem_fn(&AdminService::Service::NodeInfo), this)));
}

AdminService::Service::~Service() {
}

::grpc::Status AdminService::Service::Accounts(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::AccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::NewAccount(::grpc::ServerContext* context, const ::rpcpb::NewAccountRequest* request, ::rpcpb::NewAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::UnlockAccount(::grpc::ServerContext* context, const ::rpcpb::UnlockAccountRequest* request, ::rpcpb::UnlockAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::LockAccount(::grpc::ServerContext* context, const ::rpcpb::LockAccountRequest* request, ::rpcpb::LockAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::SendTransaction(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::SendTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::SignHash(::grpc::ServerContext* context, const ::rpcpb::SignHashRequest* request, ::rpcpb::SignHashResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GenerateRandomSeed(::grpc::ServerContext* context, const ::rpcpb::GenerateRandomSeedRequest* request, ::rpcpb::GenerateRandomSeedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::SignTransactionWithPassphrase(::grpc::ServerContext* context, const ::rpcpb::SignTransactionPassphraseRequest* request, ::rpcpb::SignTransactionPassphraseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::SendTransactionWithPassphrase(::grpc::ServerContext* context, const ::rpcpb::SendTransactionPassphraseRequest* request, ::rpcpb::SendTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::StartPprof(::grpc::ServerContext* context, const ::rpcpb::PprofRequest* request, ::rpcpb::PprofResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetConfig(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GetConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::NodeInfo(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::NodeInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* NVMService_method_names[] = {
  "/rpcpb.NVMService/DeploySmartContract",
  "/rpcpb.NVMService/NVMDataExchange",
};

std::unique_ptr< NVMService::Stub> NVMService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NVMService::Stub> stub(new NVMService::Stub(channel));
  return stub;
}

NVMService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DeploySmartContract_(NVMService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMDataExchange_(NVMService_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status NVMService::Stub::DeploySmartContract(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::rpcpb::NVMResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeploySmartContract_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::NVMResponse>* NVMService::Stub::AsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::NVMResponse>::Create(channel_.get(), cq, rpcmethod_DeploySmartContract_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcpb::NVMResponse>* NVMService::Stub::PrepareAsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpcpb::NVMResponse>::Create(channel_.get(), cq, rpcmethod_DeploySmartContract_, context, request, false);
}

::grpc::ClientReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>* NVMService::Stub::NVMDataExchangeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>::Create(channel_.get(), rpcmethod_NVMDataExchange_, context);
}

::grpc::ClientAsyncReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>* NVMService::Stub::AsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>::Create(channel_.get(), cq, rpcmethod_NVMDataExchange_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>* NVMService::Stub::PrepareAsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>::Create(channel_.get(), cq, rpcmethod_NVMDataExchange_, context, false, nullptr);
}

NVMService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMService::Service, ::rpcpb::NVMDeployRequest, ::rpcpb::NVMResponse>(
          std::mem_fn(&NVMService::Service::DeploySmartContract), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< NVMService::Service, ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>(
          std::mem_fn(&NVMService::Service::NVMDataExchange), this)));
}

NVMService::Service::~Service() {
}

::grpc::Status NVMService::Service::DeploySmartContract(::grpc::ServerContext* context, const ::rpcpb::NVMDeployRequest* request, ::rpcpb::NVMResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMService::Service::NVMDataExchange(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rpcpb::NVMResponse, ::rpcpb::NVMDataRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpcpb

