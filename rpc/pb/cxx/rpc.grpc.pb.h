// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto
// Original file comments:
// Copyright (C) 2017 go-nebulas authors
//
// This file is part of the go-nebulas library.
//
// the go-nebulas library is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// the go-nebulas library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with the go-nebulas library.  If not, see <http://www.gnu.org/licenses/>.
//
//
#ifndef GRPC_rpc_2eproto__INCLUDED
#define GRPC_rpc_2eproto__INCLUDED

#include "rpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace rpcpb {

// RPC API interface.
class ApiService final {
 public:
  static constexpr char const* service_full_name() {
    return "rpcpb.ApiService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Return the state of the neb.
    virtual ::grpc::Status GetNebState(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::GetNebStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetNebStateResponse>> AsyncGetNebState(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetNebStateResponse>>(AsyncGetNebStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetNebStateResponse>> PrepareAsyncGetNebState(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetNebStateResponse>>(PrepareAsyncGetNebStateRaw(context, request, cq));
    }
    // Return the latest irreversible block.
    virtual ::grpc::Status LatestIrreversibleBlock(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::BlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>> AsyncLatestIrreversibleBlock(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>>(AsyncLatestIrreversibleBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>> PrepareAsyncLatestIrreversibleBlock(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>>(PrepareAsyncLatestIrreversibleBlockRaw(context, request, cq));
    }
    // Return the state of the account.
    virtual ::grpc::Status GetAccountState(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::rpcpb::GetAccountStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetAccountStateResponse>> AsyncGetAccountState(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetAccountStateResponse>>(AsyncGetAccountStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetAccountStateResponse>> PrepareAsyncGetAccountState(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetAccountStateResponse>>(PrepareAsyncGetAccountStateRaw(context, request, cq));
    }
    // Call transaction
    virtual ::grpc::Status Call(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::rpcpb::CallResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::CallResponse>> AsyncCall(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::CallResponse>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::CallResponse>> PrepareAsyncCall(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::CallResponse>>(PrepareAsyncCallRaw(context, request, cq));
    }
    // Submit the signed transaction.
    virtual ::grpc::Status SendRawTransaction(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::rpcpb::SendTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>> AsyncSendRawTransaction(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>>(AsyncSendRawTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>> PrepareAsyncSendRawTransaction(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>>(PrepareAsyncSendRawTransactionRaw(context, request, cq));
    }
    // Get block info by the block hash.
    virtual ::grpc::Status GetBlockByHash(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::rpcpb::BlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>> AsyncGetBlockByHash(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>>(AsyncGetBlockByHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>> PrepareAsyncGetBlockByHash(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>>(PrepareAsyncGetBlockByHashRaw(context, request, cq));
    }
    // Get block info by the block height.
    virtual ::grpc::Status GetBlockByHeight(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::rpcpb::BlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>> AsyncGetBlockByHeight(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>>(AsyncGetBlockByHeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>> PrepareAsyncGetBlockByHeight(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>>(PrepareAsyncGetBlockByHeightRaw(context, request, cq));
    }
    // Get transactionReceipt info by tansaction hash.
    virtual ::grpc::Status GetTransactionReceipt(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::rpcpb::TransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>> AsyncGetTransactionReceipt(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>>(AsyncGetTransactionReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>> PrepareAsyncGetTransactionReceipt(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>>(PrepareAsyncGetTransactionReceiptRaw(context, request, cq));
    }
    // Get transactionReceipt info by tansaction hash.
    virtual ::grpc::Status GetTransactionByContract(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::rpcpb::TransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>> AsyncGetTransactionByContract(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>>(AsyncGetTransactionByContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>> PrepareAsyncGetTransactionByContract(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>>(PrepareAsyncGetTransactionByContractRaw(context, request, cq));
    }
    // Subscribe message
    std::unique_ptr< ::grpc::ClientReaderInterface< ::rpcpb::SubscribeResponse>> Subscribe(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::rpcpb::SubscribeResponse>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rpcpb::SubscribeResponse>> AsyncSubscribe(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rpcpb::SubscribeResponse>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rpcpb::SubscribeResponse>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rpcpb::SubscribeResponse>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    // Get GasPrice
    virtual ::grpc::Status GetGasPrice(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::GasPriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasPriceResponse>> AsyncGetGasPrice(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasPriceResponse>>(AsyncGetGasPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasPriceResponse>> PrepareAsyncGetGasPrice(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasPriceResponse>>(PrepareAsyncGetGasPriceRaw(context, request, cq));
    }
    // EstimateGas
    virtual ::grpc::Status EstimateGas(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::rpcpb::GasResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasResponse>> AsyncEstimateGas(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasResponse>>(AsyncEstimateGasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasResponse>> PrepareAsyncEstimateGas(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasResponse>>(PrepareAsyncEstimateGasRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEventsByHash(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::rpcpb::EventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::EventsResponse>> AsyncGetEventsByHash(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::EventsResponse>>(AsyncGetEventsByHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::EventsResponse>> PrepareAsyncGetEventsByHash(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::EventsResponse>>(PrepareAsyncGetEventsByHashRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDynasty(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::rpcpb::GetDynastyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetDynastyResponse>> AsyncGetDynasty(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetDynastyResponse>>(AsyncGetDynastyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetDynastyResponse>> PrepareAsyncGetDynasty(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetDynastyResponse>>(PrepareAsyncGetDynastyRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetNebStateResponse>* AsyncGetNebStateRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetNebStateResponse>* PrepareAsyncGetNebStateRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>* AsyncLatestIrreversibleBlockRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>* PrepareAsyncLatestIrreversibleBlockRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetAccountStateResponse>* AsyncGetAccountStateRaw(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetAccountStateResponse>* PrepareAsyncGetAccountStateRaw(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::CallResponse>* AsyncCallRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::CallResponse>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>* AsyncSendRawTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>* PrepareAsyncSendRawTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>* AsyncGetBlockByHashRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>* PrepareAsyncGetBlockByHashRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>* AsyncGetBlockByHeightRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::BlockResponse>* PrepareAsyncGetBlockByHeightRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>* AsyncGetTransactionReceiptRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>* PrepareAsyncGetTransactionReceiptRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>* AsyncGetTransactionByContractRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::TransactionResponse>* PrepareAsyncGetTransactionByContractRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::rpcpb::SubscribeResponse>* SubscribeRaw(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::rpcpb::SubscribeResponse>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::rpcpb::SubscribeResponse>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasPriceResponse>* AsyncGetGasPriceRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasPriceResponse>* PrepareAsyncGetGasPriceRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasResponse>* AsyncEstimateGasRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GasResponse>* PrepareAsyncEstimateGasRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::EventsResponse>* AsyncGetEventsByHashRaw(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::EventsResponse>* PrepareAsyncGetEventsByHashRaw(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetDynastyResponse>* AsyncGetDynastyRaw(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetDynastyResponse>* PrepareAsyncGetDynastyRaw(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetNebState(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::GetNebStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetNebStateResponse>> AsyncGetNebState(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetNebStateResponse>>(AsyncGetNebStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetNebStateResponse>> PrepareAsyncGetNebState(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetNebStateResponse>>(PrepareAsyncGetNebStateRaw(context, request, cq));
    }
    ::grpc::Status LatestIrreversibleBlock(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::BlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>> AsyncLatestIrreversibleBlock(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>>(AsyncLatestIrreversibleBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>> PrepareAsyncLatestIrreversibleBlock(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>>(PrepareAsyncLatestIrreversibleBlockRaw(context, request, cq));
    }
    ::grpc::Status GetAccountState(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::rpcpb::GetAccountStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetAccountStateResponse>> AsyncGetAccountState(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetAccountStateResponse>>(AsyncGetAccountStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetAccountStateResponse>> PrepareAsyncGetAccountState(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetAccountStateResponse>>(PrepareAsyncGetAccountStateRaw(context, request, cq));
    }
    ::grpc::Status Call(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::rpcpb::CallResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::CallResponse>> AsyncCall(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::CallResponse>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::CallResponse>> PrepareAsyncCall(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::CallResponse>>(PrepareAsyncCallRaw(context, request, cq));
    }
    ::grpc::Status SendRawTransaction(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::rpcpb::SendTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>> AsyncSendRawTransaction(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>>(AsyncSendRawTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>> PrepareAsyncSendRawTransaction(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>>(PrepareAsyncSendRawTransactionRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByHash(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::rpcpb::BlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>> AsyncGetBlockByHash(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>>(AsyncGetBlockByHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>> PrepareAsyncGetBlockByHash(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>>(PrepareAsyncGetBlockByHashRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByHeight(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::rpcpb::BlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>> AsyncGetBlockByHeight(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>>(AsyncGetBlockByHeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>> PrepareAsyncGetBlockByHeight(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>>(PrepareAsyncGetBlockByHeightRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionReceipt(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::rpcpb::TransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>> AsyncGetTransactionReceipt(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>>(AsyncGetTransactionReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>> PrepareAsyncGetTransactionReceipt(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>>(PrepareAsyncGetTransactionReceiptRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionByContract(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::rpcpb::TransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>> AsyncGetTransactionByContract(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>>(AsyncGetTransactionByContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>> PrepareAsyncGetTransactionByContract(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>>(PrepareAsyncGetTransactionByContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::rpcpb::SubscribeResponse>> Subscribe(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::rpcpb::SubscribeResponse>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::rpcpb::SubscribeResponse>> AsyncSubscribe(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::rpcpb::SubscribeResponse>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::rpcpb::SubscribeResponse>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::rpcpb::SubscribeResponse>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    ::grpc::Status GetGasPrice(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::GasPriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GasPriceResponse>> AsyncGetGasPrice(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GasPriceResponse>>(AsyncGetGasPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GasPriceResponse>> PrepareAsyncGetGasPrice(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GasPriceResponse>>(PrepareAsyncGetGasPriceRaw(context, request, cq));
    }
    ::grpc::Status EstimateGas(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::rpcpb::GasResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GasResponse>> AsyncEstimateGas(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GasResponse>>(AsyncEstimateGasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GasResponse>> PrepareAsyncEstimateGas(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GasResponse>>(PrepareAsyncEstimateGasRaw(context, request, cq));
    }
    ::grpc::Status GetEventsByHash(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::rpcpb::EventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::EventsResponse>> AsyncGetEventsByHash(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::EventsResponse>>(AsyncGetEventsByHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::EventsResponse>> PrepareAsyncGetEventsByHash(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::EventsResponse>>(PrepareAsyncGetEventsByHashRaw(context, request, cq));
    }
    ::grpc::Status GetDynasty(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::rpcpb::GetDynastyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetDynastyResponse>> AsyncGetDynasty(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetDynastyResponse>>(AsyncGetDynastyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetDynastyResponse>> PrepareAsyncGetDynasty(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetDynastyResponse>>(PrepareAsyncGetDynastyRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GetNebStateResponse>* AsyncGetNebStateRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GetNebStateResponse>* PrepareAsyncGetNebStateRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* AsyncLatestIrreversibleBlockRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* PrepareAsyncLatestIrreversibleBlockRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GetAccountStateResponse>* AsyncGetAccountStateRaw(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GetAccountStateResponse>* PrepareAsyncGetAccountStateRaw(::grpc::ClientContext* context, const ::rpcpb::GetAccountStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::CallResponse>* AsyncCallRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::CallResponse>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* AsyncSendRawTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* PrepareAsyncSendRawTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::SendRawTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* AsyncGetBlockByHashRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* PrepareAsyncGetBlockByHashRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* AsyncGetBlockByHeightRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::BlockResponse>* PrepareAsyncGetBlockByHeightRaw(::grpc::ClientContext* context, const ::rpcpb::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>* AsyncGetTransactionReceiptRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>* PrepareAsyncGetTransactionReceiptRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>* AsyncGetTransactionByContractRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::TransactionResponse>* PrepareAsyncGetTransactionByContractRaw(::grpc::ClientContext* context, const ::rpcpb::GetTransactionByContractRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::rpcpb::SubscribeResponse>* SubscribeRaw(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader< ::rpcpb::SubscribeResponse>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::rpcpb::SubscribeResponse>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::rpcpb::SubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GasPriceResponse>* AsyncGetGasPriceRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GasPriceResponse>* PrepareAsyncGetGasPriceRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GasResponse>* AsyncEstimateGasRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GasResponse>* PrepareAsyncEstimateGasRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::EventsResponse>* AsyncGetEventsByHashRaw(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::EventsResponse>* PrepareAsyncGetEventsByHashRaw(::grpc::ClientContext* context, const ::rpcpb::HashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GetDynastyResponse>* AsyncGetDynastyRaw(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GetDynastyResponse>* PrepareAsyncGetDynastyRaw(::grpc::ClientContext* context, const ::rpcpb::ByBlockHeightRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetNebState_;
    const ::grpc::internal::RpcMethod rpcmethod_LatestIrreversibleBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccountState_;
    const ::grpc::internal::RpcMethod rpcmethod_Call_;
    const ::grpc::internal::RpcMethod rpcmethod_SendRawTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByHash_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByHeight_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionReceipt_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionByContract_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGasPrice_;
    const ::grpc::internal::RpcMethod rpcmethod_EstimateGas_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEventsByHash_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDynasty_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Return the state of the neb.
    virtual ::grpc::Status GetNebState(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GetNebStateResponse* response);
    // Return the latest irreversible block.
    virtual ::grpc::Status LatestIrreversibleBlock(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::BlockResponse* response);
    // Return the state of the account.
    virtual ::grpc::Status GetAccountState(::grpc::ServerContext* context, const ::rpcpb::GetAccountStateRequest* request, ::rpcpb::GetAccountStateResponse* response);
    // Call transaction
    virtual ::grpc::Status Call(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::CallResponse* response);
    // Submit the signed transaction.
    virtual ::grpc::Status SendRawTransaction(::grpc::ServerContext* context, const ::rpcpb::SendRawTransactionRequest* request, ::rpcpb::SendTransactionResponse* response);
    // Get block info by the block hash.
    virtual ::grpc::Status GetBlockByHash(::grpc::ServerContext* context, const ::rpcpb::GetBlockByHashRequest* request, ::rpcpb::BlockResponse* response);
    // Get block info by the block height.
    virtual ::grpc::Status GetBlockByHeight(::grpc::ServerContext* context, const ::rpcpb::GetBlockByHeightRequest* request, ::rpcpb::BlockResponse* response);
    // Get transactionReceipt info by tansaction hash.
    virtual ::grpc::Status GetTransactionReceipt(::grpc::ServerContext* context, const ::rpcpb::GetTransactionByHashRequest* request, ::rpcpb::TransactionResponse* response);
    // Get transactionReceipt info by tansaction hash.
    virtual ::grpc::Status GetTransactionByContract(::grpc::ServerContext* context, const ::rpcpb::GetTransactionByContractRequest* request, ::rpcpb::TransactionResponse* response);
    // Subscribe message
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::rpcpb::SubscribeRequest* request, ::grpc::ServerWriter< ::rpcpb::SubscribeResponse>* writer);
    // Get GasPrice
    virtual ::grpc::Status GetGasPrice(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GasPriceResponse* response);
    // EstimateGas
    virtual ::grpc::Status EstimateGas(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::GasResponse* response);
    virtual ::grpc::Status GetEventsByHash(::grpc::ServerContext* context, const ::rpcpb::HashRequest* request, ::rpcpb::EventsResponse* response);
    virtual ::grpc::Status GetDynasty(::grpc::ServerContext* context, const ::rpcpb::ByBlockHeightRequest* request, ::rpcpb::GetDynastyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNebState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNebState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetNebState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNebState(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GetNebStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNebState(::grpc::ServerContext* context, ::rpcpb::NonParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::GetNebStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LatestIrreversibleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LatestIrreversibleBlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LatestIrreversibleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestIrreversibleBlock(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::BlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLatestIrreversibleBlock(::grpc::ServerContext* context, ::rpcpb::NonParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::BlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccountState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAccountState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAccountState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountState(::grpc::ServerContext* context, const ::rpcpb::GetAccountStateRequest* request, ::rpcpb::GetAccountStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountState(::grpc::ServerContext* context, ::rpcpb::GetAccountStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::GetAccountStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Call() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::CallResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::rpcpb::TransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::CallResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendRawTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendRawTransaction() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SendRawTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRawTransaction(::grpc::ServerContext* context, const ::rpcpb::SendRawTransactionRequest* request, ::rpcpb::SendTransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendRawTransaction(::grpc::ServerContext* context, ::rpcpb::SendRawTransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::SendTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBlockByHash() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetBlockByHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByHash(::grpc::ServerContext* context, const ::rpcpb::GetBlockByHashRequest* request, ::rpcpb::BlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByHash(::grpc::ServerContext* context, ::rpcpb::GetBlockByHashRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::BlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBlockByHeight() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetBlockByHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByHeight(::grpc::ServerContext* context, const ::rpcpb::GetBlockByHeightRequest* request, ::rpcpb::BlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByHeight(::grpc::ServerContext* context, ::rpcpb::GetBlockByHeightRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::BlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTransactionReceipt() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetTransactionReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionReceipt(::grpc::ServerContext* context, const ::rpcpb::GetTransactionByHashRequest* request, ::rpcpb::TransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionReceipt(::grpc::ServerContext* context, ::rpcpb::GetTransactionByHashRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::TransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionByContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTransactionByContract() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetTransactionByContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionByContract(::grpc::ServerContext* context, const ::rpcpb::GetTransactionByContractRequest* request, ::rpcpb::TransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionByContract(::grpc::ServerContext* context, ::rpcpb::GetTransactionByContractRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::TransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::rpcpb::SubscribeRequest* request, ::grpc::ServerWriter< ::rpcpb::SubscribeResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::rpcpb::SubscribeRequest* request, ::grpc::ServerAsyncWriter< ::rpcpb::SubscribeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGasPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetGasPrice() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetGasPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGasPrice(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GasPriceResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGasPrice(::grpc::ServerContext* context, ::rpcpb::NonParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::GasPriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EstimateGas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EstimateGas() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_EstimateGas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateGas(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::GasResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstimateGas(::grpc::ServerContext* context, ::rpcpb::TransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::GasResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEventsByHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetEventsByHash() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetEventsByHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByHash(::grpc::ServerContext* context, const ::rpcpb::HashRequest* request, ::rpcpb::EventsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventsByHash(::grpc::ServerContext* context, ::rpcpb::HashRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::EventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDynasty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDynasty() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetDynasty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDynasty(::grpc::ServerContext* context, const ::rpcpb::ByBlockHeightRequest* request, ::rpcpb::GetDynastyResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDynasty(::grpc::ServerContext* context, ::rpcpb::ByBlockHeightRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::GetDynastyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetNebState<WithAsyncMethod_LatestIrreversibleBlock<WithAsyncMethod_GetAccountState<WithAsyncMethod_Call<WithAsyncMethod_SendRawTransaction<WithAsyncMethod_GetBlockByHash<WithAsyncMethod_GetBlockByHeight<WithAsyncMethod_GetTransactionReceipt<WithAsyncMethod_GetTransactionByContract<WithAsyncMethod_Subscribe<WithAsyncMethod_GetGasPrice<WithAsyncMethod_EstimateGas<WithAsyncMethod_GetEventsByHash<WithAsyncMethod_GetDynasty<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetNebState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNebState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetNebState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNebState(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GetNebStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LatestIrreversibleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LatestIrreversibleBlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LatestIrreversibleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestIrreversibleBlock(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::BlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAccountState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAccountState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAccountState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountState(::grpc::ServerContext* context, const ::rpcpb::GetAccountStateRequest* request, ::rpcpb::GetAccountStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Call() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::CallResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendRawTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendRawTransaction() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SendRawTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRawTransaction(::grpc::ServerContext* context, const ::rpcpb::SendRawTransactionRequest* request, ::rpcpb::SendTransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBlockByHash() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetBlockByHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByHash(::grpc::ServerContext* context, const ::rpcpb::GetBlockByHashRequest* request, ::rpcpb::BlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBlockByHeight() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetBlockByHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByHeight(::grpc::ServerContext* context, const ::rpcpb::GetBlockByHeightRequest* request, ::rpcpb::BlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTransactionReceipt() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetTransactionReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionReceipt(::grpc::ServerContext* context, const ::rpcpb::GetTransactionByHashRequest* request, ::rpcpb::TransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionByContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTransactionByContract() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetTransactionByContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionByContract(::grpc::ServerContext* context, const ::rpcpb::GetTransactionByContractRequest* request, ::rpcpb::TransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::rpcpb::SubscribeRequest* request, ::grpc::ServerWriter< ::rpcpb::SubscribeResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGasPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetGasPrice() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetGasPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGasPrice(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GasPriceResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EstimateGas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EstimateGas() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_EstimateGas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateGas(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::GasResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEventsByHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetEventsByHash() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetEventsByHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByHash(::grpc::ServerContext* context, const ::rpcpb::HashRequest* request, ::rpcpb::EventsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDynasty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDynasty() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetDynasty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDynasty(::grpc::ServerContext* context, const ::rpcpb::ByBlockHeightRequest* request, ::rpcpb::GetDynastyResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNebState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNebState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::NonParamsRequest, ::rpcpb::GetNebStateResponse>(std::bind(&WithStreamedUnaryMethod_GetNebState<BaseClass>::StreamedGetNebState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNebState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNebState(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GetNebStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNebState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::NonParamsRequest,::rpcpb::GetNebStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LatestIrreversibleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LatestIrreversibleBlock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::NonParamsRequest, ::rpcpb::BlockResponse>(std::bind(&WithStreamedUnaryMethod_LatestIrreversibleBlock<BaseClass>::StreamedLatestIrreversibleBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LatestIrreversibleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LatestIrreversibleBlock(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::BlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLatestIrreversibleBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::NonParamsRequest,::rpcpb::BlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccountState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAccountState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::GetAccountStateRequest, ::rpcpb::GetAccountStateResponse>(std::bind(&WithStreamedUnaryMethod_GetAccountState<BaseClass>::StreamedGetAccountState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAccountState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccountState(::grpc::ServerContext* context, const ::rpcpb::GetAccountStateRequest* request, ::rpcpb::GetAccountStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccountState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::GetAccountStateRequest,::rpcpb::GetAccountStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Call() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::TransactionRequest, ::rpcpb::CallResponse>(std::bind(&WithStreamedUnaryMethod_Call<BaseClass>::StreamedCall, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Call(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::CallResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::TransactionRequest,::rpcpb::CallResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendRawTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendRawTransaction() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::SendRawTransactionRequest, ::rpcpb::SendTransactionResponse>(std::bind(&WithStreamedUnaryMethod_SendRawTransaction<BaseClass>::StreamedSendRawTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendRawTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendRawTransaction(::grpc::ServerContext* context, const ::rpcpb::SendRawTransactionRequest* request, ::rpcpb::SendTransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendRawTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::SendRawTransactionRequest,::rpcpb::SendTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBlockByHash() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::GetBlockByHashRequest, ::rpcpb::BlockResponse>(std::bind(&WithStreamedUnaryMethod_GetBlockByHash<BaseClass>::StreamedGetBlockByHash, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBlockByHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByHash(::grpc::ServerContext* context, const ::rpcpb::GetBlockByHashRequest* request, ::rpcpb::BlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::GetBlockByHashRequest,::rpcpb::BlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBlockByHeight() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::GetBlockByHeightRequest, ::rpcpb::BlockResponse>(std::bind(&WithStreamedUnaryMethod_GetBlockByHeight<BaseClass>::StreamedGetBlockByHeight, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBlockByHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByHeight(::grpc::ServerContext* context, const ::rpcpb::GetBlockByHeightRequest* request, ::rpcpb::BlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByHeight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::GetBlockByHeightRequest,::rpcpb::BlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTransactionReceipt() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::GetTransactionByHashRequest, ::rpcpb::TransactionResponse>(std::bind(&WithStreamedUnaryMethod_GetTransactionReceipt<BaseClass>::StreamedGetTransactionReceipt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransactionReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionReceipt(::grpc::ServerContext* context, const ::rpcpb::GetTransactionByHashRequest* request, ::rpcpb::TransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionReceipt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::GetTransactionByHashRequest,::rpcpb::TransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionByContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTransactionByContract() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::GetTransactionByContractRequest, ::rpcpb::TransactionResponse>(std::bind(&WithStreamedUnaryMethod_GetTransactionByContract<BaseClass>::StreamedGetTransactionByContract, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransactionByContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionByContract(::grpc::ServerContext* context, const ::rpcpb::GetTransactionByContractRequest* request, ::rpcpb::TransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionByContract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::GetTransactionByContractRequest,::rpcpb::TransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGasPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetGasPrice() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::NonParamsRequest, ::rpcpb::GasPriceResponse>(std::bind(&WithStreamedUnaryMethod_GetGasPrice<BaseClass>::StreamedGetGasPrice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetGasPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGasPrice(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GasPriceResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGasPrice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::NonParamsRequest,::rpcpb::GasPriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EstimateGas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EstimateGas() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::TransactionRequest, ::rpcpb::GasResponse>(std::bind(&WithStreamedUnaryMethod_EstimateGas<BaseClass>::StreamedEstimateGas, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EstimateGas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EstimateGas(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::GasResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEstimateGas(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::TransactionRequest,::rpcpb::GasResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEventsByHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetEventsByHash() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::HashRequest, ::rpcpb::EventsResponse>(std::bind(&WithStreamedUnaryMethod_GetEventsByHash<BaseClass>::StreamedGetEventsByHash, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetEventsByHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEventsByHash(::grpc::ServerContext* context, const ::rpcpb::HashRequest* request, ::rpcpb::EventsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEventsByHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::HashRequest,::rpcpb::EventsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDynasty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDynasty() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::ByBlockHeightRequest, ::rpcpb::GetDynastyResponse>(std::bind(&WithStreamedUnaryMethod_GetDynasty<BaseClass>::StreamedGetDynasty, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDynasty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDynasty(::grpc::ServerContext* context, const ::rpcpb::ByBlockHeightRequest* request, ::rpcpb::GetDynastyResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDynasty(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::ByBlockHeightRequest,::rpcpb::GetDynastyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetNebState<WithStreamedUnaryMethod_LatestIrreversibleBlock<WithStreamedUnaryMethod_GetAccountState<WithStreamedUnaryMethod_Call<WithStreamedUnaryMethod_SendRawTransaction<WithStreamedUnaryMethod_GetBlockByHash<WithStreamedUnaryMethod_GetBlockByHeight<WithStreamedUnaryMethod_GetTransactionReceipt<WithStreamedUnaryMethod_GetTransactionByContract<WithStreamedUnaryMethod_GetGasPrice<WithStreamedUnaryMethod_EstimateGas<WithStreamedUnaryMethod_GetEventsByHash<WithStreamedUnaryMethod_GetDynasty<Service > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler< ::rpcpb::SubscribeRequest, ::rpcpb::SubscribeResponse>(std::bind(&WithSplitStreamingMethod_Subscribe<BaseClass>::StreamedSubscribe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::rpcpb::SubscribeRequest* request, ::grpc::ServerWriter< ::rpcpb::SubscribeResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::rpcpb::SubscribeRequest,::rpcpb::SubscribeResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetNebState<WithStreamedUnaryMethod_LatestIrreversibleBlock<WithStreamedUnaryMethod_GetAccountState<WithStreamedUnaryMethod_Call<WithStreamedUnaryMethod_SendRawTransaction<WithStreamedUnaryMethod_GetBlockByHash<WithStreamedUnaryMethod_GetBlockByHeight<WithStreamedUnaryMethod_GetTransactionReceipt<WithStreamedUnaryMethod_GetTransactionByContract<WithSplitStreamingMethod_Subscribe<WithStreamedUnaryMethod_GetGasPrice<WithStreamedUnaryMethod_EstimateGas<WithStreamedUnaryMethod_GetEventsByHash<WithStreamedUnaryMethod_GetDynasty<Service > > > > > > > > > > > > > > StreamedService;
};

class AdminService final {
 public:
  static constexpr char const* service_full_name() {
    return "rpcpb.AdminService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Accounts return account list.
    virtual ::grpc::Status Accounts(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::AccountsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::AccountsResponse>> AsyncAccounts(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::AccountsResponse>>(AsyncAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::AccountsResponse>> PrepareAsyncAccounts(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::AccountsResponse>>(PrepareAsyncAccountsRaw(context, request, cq));
    }
    // NewAccount create a new account with passphrase
    virtual ::grpc::Status NewAccount(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::rpcpb::NewAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NewAccountResponse>> AsyncNewAccount(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NewAccountResponse>>(AsyncNewAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NewAccountResponse>> PrepareAsyncNewAccount(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NewAccountResponse>>(PrepareAsyncNewAccountRaw(context, request, cq));
    }
    // UnlockAccount unlock account with passphrase
    virtual ::grpc::Status UnlockAccount(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::rpcpb::UnlockAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::UnlockAccountResponse>> AsyncUnlockAccount(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::UnlockAccountResponse>>(AsyncUnlockAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::UnlockAccountResponse>> PrepareAsyncUnlockAccount(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::UnlockAccountResponse>>(PrepareAsyncUnlockAccountRaw(context, request, cq));
    }
    // LockAccount lock account
    virtual ::grpc::Status LockAccount(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::rpcpb::LockAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::LockAccountResponse>> AsyncLockAccount(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::LockAccountResponse>>(AsyncLockAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::LockAccountResponse>> PrepareAsyncLockAccount(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::LockAccountResponse>>(PrepareAsyncLockAccountRaw(context, request, cq));
    }
    // Verify, sign, and send the transaction.
    virtual ::grpc::Status SendTransaction(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::rpcpb::SendTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>> AsyncSendTransaction(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>>(AsyncSendTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>> PrepareAsyncSendTransaction(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>>(PrepareAsyncSendTransactionRaw(context, request, cq));
    }
    // Sign sign msg
    virtual ::grpc::Status SignHash(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::rpcpb::SignHashResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignHashResponse>> AsyncSignHash(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignHashResponse>>(AsyncSignHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignHashResponse>> PrepareAsyncSignHash(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignHashResponse>>(PrepareAsyncSignHashRaw(context, request, cq));
    }
    virtual ::grpc::Status GenerateRandomSeed(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::rpcpb::GenerateRandomSeedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GenerateRandomSeedResponse>> AsyncGenerateRandomSeed(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GenerateRandomSeedResponse>>(AsyncGenerateRandomSeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GenerateRandomSeedResponse>> PrepareAsyncGenerateRandomSeed(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GenerateRandomSeedResponse>>(PrepareAsyncGenerateRandomSeedRaw(context, request, cq));
    }
    // Sign sign transaction
    virtual ::grpc::Status SignTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::rpcpb::SignTransactionPassphraseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignTransactionPassphraseResponse>> AsyncSignTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignTransactionPassphraseResponse>>(AsyncSignTransactionWithPassphraseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignTransactionPassphraseResponse>> PrepareAsyncSignTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignTransactionPassphraseResponse>>(PrepareAsyncSignTransactionWithPassphraseRaw(context, request, cq));
    }
    // SendTransactionWithPassphrase send transaction with passphrase
    virtual ::grpc::Status SendTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::rpcpb::SendTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>> AsyncSendTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>>(AsyncSendTransactionWithPassphraseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>> PrepareAsyncSendTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>>(PrepareAsyncSendTransactionWithPassphraseRaw(context, request, cq));
    }
    virtual ::grpc::Status StartPprof(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::rpcpb::PprofResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::PprofResponse>> AsyncStartPprof(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::PprofResponse>>(AsyncStartPprofRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::PprofResponse>> PrepareAsyncStartPprof(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::PprofResponse>>(PrepareAsyncStartPprofRaw(context, request, cq));
    }
    // Get Config
    virtual ::grpc::Status GetConfig(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::GetConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetConfigResponse>> AsyncGetConfig(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetConfigResponse>>(AsyncGetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetConfigResponse>> PrepareAsyncGetConfig(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetConfigResponse>>(PrepareAsyncGetConfigRaw(context, request, cq));
    }
    // Return the p2p node info.
    virtual ::grpc::Status NodeInfo(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::NodeInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NodeInfoResponse>> AsyncNodeInfo(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NodeInfoResponse>>(AsyncNodeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NodeInfoResponse>> PrepareAsyncNodeInfo(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NodeInfoResponse>>(PrepareAsyncNodeInfoRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::AccountsResponse>* AsyncAccountsRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::AccountsResponse>* PrepareAsyncAccountsRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NewAccountResponse>* AsyncNewAccountRaw(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NewAccountResponse>* PrepareAsyncNewAccountRaw(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::UnlockAccountResponse>* AsyncUnlockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::UnlockAccountResponse>* PrepareAsyncUnlockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::LockAccountResponse>* AsyncLockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::LockAccountResponse>* PrepareAsyncLockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>* AsyncSendTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>* PrepareAsyncSendTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignHashResponse>* AsyncSignHashRaw(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignHashResponse>* PrepareAsyncSignHashRaw(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GenerateRandomSeedResponse>* AsyncGenerateRandomSeedRaw(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GenerateRandomSeedResponse>* PrepareAsyncGenerateRandomSeedRaw(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignTransactionPassphraseResponse>* AsyncSignTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SignTransactionPassphraseResponse>* PrepareAsyncSignTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>* AsyncSendTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::SendTransactionResponse>* PrepareAsyncSendTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::PprofResponse>* AsyncStartPprofRaw(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::PprofResponse>* PrepareAsyncStartPprofRaw(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetConfigResponse>* AsyncGetConfigRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::GetConfigResponse>* PrepareAsyncGetConfigRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NodeInfoResponse>* AsyncNodeInfoRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NodeInfoResponse>* PrepareAsyncNodeInfoRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Accounts(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::AccountsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::AccountsResponse>> AsyncAccounts(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::AccountsResponse>>(AsyncAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::AccountsResponse>> PrepareAsyncAccounts(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::AccountsResponse>>(PrepareAsyncAccountsRaw(context, request, cq));
    }
    ::grpc::Status NewAccount(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::rpcpb::NewAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NewAccountResponse>> AsyncNewAccount(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NewAccountResponse>>(AsyncNewAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NewAccountResponse>> PrepareAsyncNewAccount(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NewAccountResponse>>(PrepareAsyncNewAccountRaw(context, request, cq));
    }
    ::grpc::Status UnlockAccount(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::rpcpb::UnlockAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::UnlockAccountResponse>> AsyncUnlockAccount(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::UnlockAccountResponse>>(AsyncUnlockAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::UnlockAccountResponse>> PrepareAsyncUnlockAccount(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::UnlockAccountResponse>>(PrepareAsyncUnlockAccountRaw(context, request, cq));
    }
    ::grpc::Status LockAccount(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::rpcpb::LockAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::LockAccountResponse>> AsyncLockAccount(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::LockAccountResponse>>(AsyncLockAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::LockAccountResponse>> PrepareAsyncLockAccount(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::LockAccountResponse>>(PrepareAsyncLockAccountRaw(context, request, cq));
    }
    ::grpc::Status SendTransaction(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::rpcpb::SendTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>> AsyncSendTransaction(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>>(AsyncSendTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>> PrepareAsyncSendTransaction(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>>(PrepareAsyncSendTransactionRaw(context, request, cq));
    }
    ::grpc::Status SignHash(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::rpcpb::SignHashResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SignHashResponse>> AsyncSignHash(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SignHashResponse>>(AsyncSignHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SignHashResponse>> PrepareAsyncSignHash(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SignHashResponse>>(PrepareAsyncSignHashRaw(context, request, cq));
    }
    ::grpc::Status GenerateRandomSeed(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::rpcpb::GenerateRandomSeedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GenerateRandomSeedResponse>> AsyncGenerateRandomSeed(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GenerateRandomSeedResponse>>(AsyncGenerateRandomSeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GenerateRandomSeedResponse>> PrepareAsyncGenerateRandomSeed(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GenerateRandomSeedResponse>>(PrepareAsyncGenerateRandomSeedRaw(context, request, cq));
    }
    ::grpc::Status SignTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::rpcpb::SignTransactionPassphraseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SignTransactionPassphraseResponse>> AsyncSignTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SignTransactionPassphraseResponse>>(AsyncSignTransactionWithPassphraseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SignTransactionPassphraseResponse>> PrepareAsyncSignTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SignTransactionPassphraseResponse>>(PrepareAsyncSignTransactionWithPassphraseRaw(context, request, cq));
    }
    ::grpc::Status SendTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::rpcpb::SendTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>> AsyncSendTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>>(AsyncSendTransactionWithPassphraseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>> PrepareAsyncSendTransactionWithPassphrase(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>>(PrepareAsyncSendTransactionWithPassphraseRaw(context, request, cq));
    }
    ::grpc::Status StartPprof(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::rpcpb::PprofResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::PprofResponse>> AsyncStartPprof(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::PprofResponse>>(AsyncStartPprofRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::PprofResponse>> PrepareAsyncStartPprof(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::PprofResponse>>(PrepareAsyncStartPprofRaw(context, request, cq));
    }
    ::grpc::Status GetConfig(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::GetConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetConfigResponse>> AsyncGetConfig(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetConfigResponse>>(AsyncGetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetConfigResponse>> PrepareAsyncGetConfig(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::GetConfigResponse>>(PrepareAsyncGetConfigRaw(context, request, cq));
    }
    ::grpc::Status NodeInfo(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::rpcpb::NodeInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NodeInfoResponse>> AsyncNodeInfo(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NodeInfoResponse>>(AsyncNodeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NodeInfoResponse>> PrepareAsyncNodeInfo(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NodeInfoResponse>>(PrepareAsyncNodeInfoRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::AccountsResponse>* AsyncAccountsRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::AccountsResponse>* PrepareAsyncAccountsRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::NewAccountResponse>* AsyncNewAccountRaw(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::NewAccountResponse>* PrepareAsyncNewAccountRaw(::grpc::ClientContext* context, const ::rpcpb::NewAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::UnlockAccountResponse>* AsyncUnlockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::UnlockAccountResponse>* PrepareAsyncUnlockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::UnlockAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::LockAccountResponse>* AsyncLockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::LockAccountResponse>* PrepareAsyncLockAccountRaw(::grpc::ClientContext* context, const ::rpcpb::LockAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* AsyncSendTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* PrepareAsyncSendTransactionRaw(::grpc::ClientContext* context, const ::rpcpb::TransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::SignHashResponse>* AsyncSignHashRaw(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::SignHashResponse>* PrepareAsyncSignHashRaw(::grpc::ClientContext* context, const ::rpcpb::SignHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GenerateRandomSeedResponse>* AsyncGenerateRandomSeedRaw(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GenerateRandomSeedResponse>* PrepareAsyncGenerateRandomSeedRaw(::grpc::ClientContext* context, const ::rpcpb::GenerateRandomSeedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::SignTransactionPassphraseResponse>* AsyncSignTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::SignTransactionPassphraseResponse>* PrepareAsyncSignTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SignTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* AsyncSendTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::SendTransactionResponse>* PrepareAsyncSendTransactionWithPassphraseRaw(::grpc::ClientContext* context, const ::rpcpb::SendTransactionPassphraseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::PprofResponse>* AsyncStartPprofRaw(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::PprofResponse>* PrepareAsyncStartPprofRaw(::grpc::ClientContext* context, const ::rpcpb::PprofRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GetConfigResponse>* AsyncGetConfigRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::GetConfigResponse>* PrepareAsyncGetConfigRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::NodeInfoResponse>* AsyncNodeInfoRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::NodeInfoResponse>* PrepareAsyncNodeInfoRaw(::grpc::ClientContext* context, const ::rpcpb::NonParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Accounts_;
    const ::grpc::internal::RpcMethod rpcmethod_NewAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_UnlockAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_LockAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_SendTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_SignHash_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateRandomSeed_;
    const ::grpc::internal::RpcMethod rpcmethod_SignTransactionWithPassphrase_;
    const ::grpc::internal::RpcMethod rpcmethod_SendTransactionWithPassphrase_;
    const ::grpc::internal::RpcMethod rpcmethod_StartPprof_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_NodeInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Accounts return account list.
    virtual ::grpc::Status Accounts(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::AccountsResponse* response);
    // NewAccount create a new account with passphrase
    virtual ::grpc::Status NewAccount(::grpc::ServerContext* context, const ::rpcpb::NewAccountRequest* request, ::rpcpb::NewAccountResponse* response);
    // UnlockAccount unlock account with passphrase
    virtual ::grpc::Status UnlockAccount(::grpc::ServerContext* context, const ::rpcpb::UnlockAccountRequest* request, ::rpcpb::UnlockAccountResponse* response);
    // LockAccount lock account
    virtual ::grpc::Status LockAccount(::grpc::ServerContext* context, const ::rpcpb::LockAccountRequest* request, ::rpcpb::LockAccountResponse* response);
    // Verify, sign, and send the transaction.
    virtual ::grpc::Status SendTransaction(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::SendTransactionResponse* response);
    // Sign sign msg
    virtual ::grpc::Status SignHash(::grpc::ServerContext* context, const ::rpcpb::SignHashRequest* request, ::rpcpb::SignHashResponse* response);
    virtual ::grpc::Status GenerateRandomSeed(::grpc::ServerContext* context, const ::rpcpb::GenerateRandomSeedRequest* request, ::rpcpb::GenerateRandomSeedResponse* response);
    // Sign sign transaction
    virtual ::grpc::Status SignTransactionWithPassphrase(::grpc::ServerContext* context, const ::rpcpb::SignTransactionPassphraseRequest* request, ::rpcpb::SignTransactionPassphraseResponse* response);
    // SendTransactionWithPassphrase send transaction with passphrase
    virtual ::grpc::Status SendTransactionWithPassphrase(::grpc::ServerContext* context, const ::rpcpb::SendTransactionPassphraseRequest* request, ::rpcpb::SendTransactionResponse* response);
    virtual ::grpc::Status StartPprof(::grpc::ServerContext* context, const ::rpcpb::PprofRequest* request, ::rpcpb::PprofResponse* response);
    // Get Config
    virtual ::grpc::Status GetConfig(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GetConfigResponse* response);
    // Return the p2p node info.
    virtual ::grpc::Status NodeInfo(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::NodeInfoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Accounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Accounts() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Accounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accounts(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::AccountsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccounts(::grpc::ServerContext* context, ::rpcpb::NonParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::AccountsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewAccount() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NewAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAccount(::grpc::ServerContext* context, const ::rpcpb::NewAccountRequest* request, ::rpcpb::NewAccountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewAccount(::grpc::ServerContext* context, ::rpcpb::NewAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::NewAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnlockAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UnlockAccount() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UnlockAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockAccount(::grpc::ServerContext* context, const ::rpcpb::UnlockAccountRequest* request, ::rpcpb::UnlockAccountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlockAccount(::grpc::ServerContext* context, ::rpcpb::UnlockAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::UnlockAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LockAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LockAccount() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LockAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockAccount(::grpc::ServerContext* context, const ::rpcpb::LockAccountRequest* request, ::rpcpb::LockAccountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLockAccount(::grpc::ServerContext* context, ::rpcpb::LockAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::LockAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendTransaction() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SendTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTransaction(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::SendTransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTransaction(::grpc::ServerContext* context, ::rpcpb::TransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::SendTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SignHash() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SignHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignHash(::grpc::ServerContext* context, const ::rpcpb::SignHashRequest* request, ::rpcpb::SignHashResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignHash(::grpc::ServerContext* context, ::rpcpb::SignHashRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::SignHashResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateRandomSeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GenerateRandomSeed() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GenerateRandomSeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateRandomSeed(::grpc::ServerContext* context, const ::rpcpb::GenerateRandomSeedRequest* request, ::rpcpb::GenerateRandomSeedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateRandomSeed(::grpc::ServerContext* context, ::rpcpb::GenerateRandomSeedRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::GenerateRandomSeedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignTransactionWithPassphrase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SignTransactionWithPassphrase() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SignTransactionWithPassphrase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignTransactionWithPassphrase(::grpc::ServerContext* context, const ::rpcpb::SignTransactionPassphraseRequest* request, ::rpcpb::SignTransactionPassphraseResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignTransactionWithPassphrase(::grpc::ServerContext* context, ::rpcpb::SignTransactionPassphraseRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::SignTransactionPassphraseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendTransactionWithPassphrase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendTransactionWithPassphrase() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SendTransactionWithPassphrase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTransactionWithPassphrase(::grpc::ServerContext* context, const ::rpcpb::SendTransactionPassphraseRequest* request, ::rpcpb::SendTransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTransactionWithPassphrase(::grpc::ServerContext* context, ::rpcpb::SendTransactionPassphraseRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::SendTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartPprof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartPprof() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_StartPprof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartPprof(::grpc::ServerContext* context, const ::rpcpb::PprofRequest* request, ::rpcpb::PprofResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartPprof(::grpc::ServerContext* context, ::rpcpb::PprofRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::PprofResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetConfig() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfig(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GetConfigResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConfig(::grpc::ServerContext* context, ::rpcpb::NonParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::GetConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NodeInfo() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_NodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NodeInfo(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::NodeInfoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNodeInfo(::grpc::ServerContext* context, ::rpcpb::NonParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::NodeInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Accounts<WithAsyncMethod_NewAccount<WithAsyncMethod_UnlockAccount<WithAsyncMethod_LockAccount<WithAsyncMethod_SendTransaction<WithAsyncMethod_SignHash<WithAsyncMethod_GenerateRandomSeed<WithAsyncMethod_SignTransactionWithPassphrase<WithAsyncMethod_SendTransactionWithPassphrase<WithAsyncMethod_StartPprof<WithAsyncMethod_GetConfig<WithAsyncMethod_NodeInfo<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Accounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Accounts() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Accounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accounts(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::AccountsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewAccount() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NewAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAccount(::grpc::ServerContext* context, const ::rpcpb::NewAccountRequest* request, ::rpcpb::NewAccountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnlockAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UnlockAccount() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UnlockAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockAccount(::grpc::ServerContext* context, const ::rpcpb::UnlockAccountRequest* request, ::rpcpb::UnlockAccountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LockAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LockAccount() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LockAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockAccount(::grpc::ServerContext* context, const ::rpcpb::LockAccountRequest* request, ::rpcpb::LockAccountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendTransaction() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SendTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTransaction(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::SendTransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SignHash() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SignHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignHash(::grpc::ServerContext* context, const ::rpcpb::SignHashRequest* request, ::rpcpb::SignHashResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateRandomSeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GenerateRandomSeed() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GenerateRandomSeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateRandomSeed(::grpc::ServerContext* context, const ::rpcpb::GenerateRandomSeedRequest* request, ::rpcpb::GenerateRandomSeedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignTransactionWithPassphrase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SignTransactionWithPassphrase() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SignTransactionWithPassphrase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignTransactionWithPassphrase(::grpc::ServerContext* context, const ::rpcpb::SignTransactionPassphraseRequest* request, ::rpcpb::SignTransactionPassphraseResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendTransactionWithPassphrase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendTransactionWithPassphrase() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SendTransactionWithPassphrase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTransactionWithPassphrase(::grpc::ServerContext* context, const ::rpcpb::SendTransactionPassphraseRequest* request, ::rpcpb::SendTransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartPprof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartPprof() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_StartPprof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartPprof(::grpc::ServerContext* context, const ::rpcpb::PprofRequest* request, ::rpcpb::PprofResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetConfig() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfig(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GetConfigResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NodeInfo() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_NodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NodeInfo(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::NodeInfoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Accounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Accounts() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::NonParamsRequest, ::rpcpb::AccountsResponse>(std::bind(&WithStreamedUnaryMethod_Accounts<BaseClass>::StreamedAccounts, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Accounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Accounts(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::AccountsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAccounts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::NonParamsRequest,::rpcpb::AccountsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewAccount() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::NewAccountRequest, ::rpcpb::NewAccountResponse>(std::bind(&WithStreamedUnaryMethod_NewAccount<BaseClass>::StreamedNewAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewAccount(::grpc::ServerContext* context, const ::rpcpb::NewAccountRequest* request, ::rpcpb::NewAccountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::NewAccountRequest,::rpcpb::NewAccountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnlockAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UnlockAccount() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::UnlockAccountRequest, ::rpcpb::UnlockAccountResponse>(std::bind(&WithStreamedUnaryMethod_UnlockAccount<BaseClass>::StreamedUnlockAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UnlockAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnlockAccount(::grpc::ServerContext* context, const ::rpcpb::UnlockAccountRequest* request, ::rpcpb::UnlockAccountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnlockAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::UnlockAccountRequest,::rpcpb::UnlockAccountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LockAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LockAccount() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::LockAccountRequest, ::rpcpb::LockAccountResponse>(std::bind(&WithStreamedUnaryMethod_LockAccount<BaseClass>::StreamedLockAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LockAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LockAccount(::grpc::ServerContext* context, const ::rpcpb::LockAccountRequest* request, ::rpcpb::LockAccountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLockAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::LockAccountRequest,::rpcpb::LockAccountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendTransaction() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::TransactionRequest, ::rpcpb::SendTransactionResponse>(std::bind(&WithStreamedUnaryMethod_SendTransaction<BaseClass>::StreamedSendTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendTransaction(::grpc::ServerContext* context, const ::rpcpb::TransactionRequest* request, ::rpcpb::SendTransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::TransactionRequest,::rpcpb::SendTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SignHash() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::SignHashRequest, ::rpcpb::SignHashResponse>(std::bind(&WithStreamedUnaryMethod_SignHash<BaseClass>::StreamedSignHash, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SignHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignHash(::grpc::ServerContext* context, const ::rpcpb::SignHashRequest* request, ::rpcpb::SignHashResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::SignHashRequest,::rpcpb::SignHashResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateRandomSeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GenerateRandomSeed() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::GenerateRandomSeedRequest, ::rpcpb::GenerateRandomSeedResponse>(std::bind(&WithStreamedUnaryMethod_GenerateRandomSeed<BaseClass>::StreamedGenerateRandomSeed, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GenerateRandomSeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateRandomSeed(::grpc::ServerContext* context, const ::rpcpb::GenerateRandomSeedRequest* request, ::rpcpb::GenerateRandomSeedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateRandomSeed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::GenerateRandomSeedRequest,::rpcpb::GenerateRandomSeedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignTransactionWithPassphrase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SignTransactionWithPassphrase() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::SignTransactionPassphraseRequest, ::rpcpb::SignTransactionPassphraseResponse>(std::bind(&WithStreamedUnaryMethod_SignTransactionWithPassphrase<BaseClass>::StreamedSignTransactionWithPassphrase, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SignTransactionWithPassphrase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignTransactionWithPassphrase(::grpc::ServerContext* context, const ::rpcpb::SignTransactionPassphraseRequest* request, ::rpcpb::SignTransactionPassphraseResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignTransactionWithPassphrase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::SignTransactionPassphraseRequest,::rpcpb::SignTransactionPassphraseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendTransactionWithPassphrase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendTransactionWithPassphrase() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::SendTransactionPassphraseRequest, ::rpcpb::SendTransactionResponse>(std::bind(&WithStreamedUnaryMethod_SendTransactionWithPassphrase<BaseClass>::StreamedSendTransactionWithPassphrase, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendTransactionWithPassphrase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendTransactionWithPassphrase(::grpc::ServerContext* context, const ::rpcpb::SendTransactionPassphraseRequest* request, ::rpcpb::SendTransactionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendTransactionWithPassphrase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::SendTransactionPassphraseRequest,::rpcpb::SendTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartPprof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StartPprof() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::PprofRequest, ::rpcpb::PprofResponse>(std::bind(&WithStreamedUnaryMethod_StartPprof<BaseClass>::StreamedStartPprof, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartPprof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartPprof(::grpc::ServerContext* context, const ::rpcpb::PprofRequest* request, ::rpcpb::PprofResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartPprof(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::PprofRequest,::rpcpb::PprofResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetConfig() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::NonParamsRequest, ::rpcpb::GetConfigResponse>(std::bind(&WithStreamedUnaryMethod_GetConfig<BaseClass>::StreamedGetConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConfig(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::GetConfigResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::NonParamsRequest,::rpcpb::GetConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NodeInfo() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::NonParamsRequest, ::rpcpb::NodeInfoResponse>(std::bind(&WithStreamedUnaryMethod_NodeInfo<BaseClass>::StreamedNodeInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NodeInfo(::grpc::ServerContext* context, const ::rpcpb::NonParamsRequest* request, ::rpcpb::NodeInfoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNodeInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::NonParamsRequest,::rpcpb::NodeInfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Accounts<WithStreamedUnaryMethod_NewAccount<WithStreamedUnaryMethod_UnlockAccount<WithStreamedUnaryMethod_LockAccount<WithStreamedUnaryMethod_SendTransaction<WithStreamedUnaryMethod_SignHash<WithStreamedUnaryMethod_GenerateRandomSeed<WithStreamedUnaryMethod_SignTransactionWithPassphrase<WithStreamedUnaryMethod_SendTransactionWithPassphrase<WithStreamedUnaryMethod_StartPprof<WithStreamedUnaryMethod_GetConfig<WithStreamedUnaryMethod_NodeInfo<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Accounts<WithStreamedUnaryMethod_NewAccount<WithStreamedUnaryMethod_UnlockAccount<WithStreamedUnaryMethod_LockAccount<WithStreamedUnaryMethod_SendTransaction<WithStreamedUnaryMethod_SignHash<WithStreamedUnaryMethod_GenerateRandomSeed<WithStreamedUnaryMethod_SignTransactionWithPassphrase<WithStreamedUnaryMethod_SendTransactionWithPassphrase<WithStreamedUnaryMethod_StartPprof<WithStreamedUnaryMethod_GetConfig<WithStreamedUnaryMethod_NodeInfo<Service > > > > > > > > > > > > StreamedService;
};

// ================ NVM services =================
//
class NVMService final {
 public:
  static constexpr char const* service_full_name() {
    return "rpcpb.NVMService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DeploySmartContract(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::rpcpb::NVMResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NVMResponse>> AsyncDeploySmartContract(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NVMResponse>>(AsyncDeploySmartContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NVMResponse>> PrepareAsyncDeploySmartContract(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NVMResponse>>(PrepareAsyncDeploySmartContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>> NVMDataExchange(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>>(NVMDataExchangeRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>> AsyncNVMDataExchange(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>>(AsyncNVMDataExchangeRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>> PrepareAsyncNVMDataExchange(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>>(PrepareAsyncNVMDataExchangeRaw(context, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NVMResponse>* AsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpcpb::NVMResponse>* PrepareAsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>* NVMDataExchangeRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>* AsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>* PrepareAsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DeploySmartContract(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::rpcpb::NVMResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NVMResponse>> AsyncDeploySmartContract(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NVMResponse>>(AsyncDeploySmartContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NVMResponse>> PrepareAsyncDeploySmartContract(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpcpb::NVMResponse>>(PrepareAsyncDeploySmartContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>> NVMDataExchange(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>>(NVMDataExchangeRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>> AsyncNVMDataExchange(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>>(AsyncNVMDataExchangeRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>> PrepareAsyncNVMDataExchange(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>>(PrepareAsyncNVMDataExchangeRaw(context, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::NVMResponse>* AsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpcpb::NVMResponse>* PrepareAsyncDeploySmartContractRaw(::grpc::ClientContext* context, const ::rpcpb::NVMDeployRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>* NVMDataExchangeRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>* AsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::rpcpb::NVMDataRequest, ::rpcpb::NVMResponse>* PrepareAsyncNVMDataExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DeploySmartContract_;
    const ::grpc::internal::RpcMethod rpcmethod_NVMDataExchange_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DeploySmartContract(::grpc::ServerContext* context, const ::rpcpb::NVMDeployRequest* request, ::rpcpb::NVMResponse* response);
    virtual ::grpc::Status NVMDataExchange(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rpcpb::NVMResponse, ::rpcpb::NVMDataRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_DeploySmartContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeploySmartContract() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DeploySmartContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeploySmartContract(::grpc::ServerContext* context, const ::rpcpb::NVMDeployRequest* request, ::rpcpb::NVMResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeploySmartContract(::grpc::ServerContext* context, ::rpcpb::NVMDeployRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpcpb::NVMResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NVMDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NVMDataExchange() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NVMDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMDataExchange(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rpcpb::NVMResponse, ::rpcpb::NVMDataRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMDataExchange(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::rpcpb::NVMResponse, ::rpcpb::NVMDataRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DeploySmartContract<WithAsyncMethod_NVMDataExchange<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_DeploySmartContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeploySmartContract() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DeploySmartContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeploySmartContract(::grpc::ServerContext* context, const ::rpcpb::NVMDeployRequest* request, ::rpcpb::NVMResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NVMDataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NVMDataExchange() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NVMDataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMDataExchange(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rpcpb::NVMResponse, ::rpcpb::NVMDataRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeploySmartContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeploySmartContract() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rpcpb::NVMDeployRequest, ::rpcpb::NVMResponse>(std::bind(&WithStreamedUnaryMethod_DeploySmartContract<BaseClass>::StreamedDeploySmartContract, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeploySmartContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeploySmartContract(::grpc::ServerContext* context, const ::rpcpb::NVMDeployRequest* request, ::rpcpb::NVMResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeploySmartContract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpcpb::NVMDeployRequest,::rpcpb::NVMResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DeploySmartContract<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DeploySmartContract<Service > StreamedService;
};

}  // namespace rpcpb


#endif  // GRPC_rpc_2eproto__INCLUDED
