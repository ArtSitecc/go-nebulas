// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: state.proto

package consensuspb

import (
	fmt "fmt"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type ConsensusRoot struct {
	Timestamp   int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Proposer    []byte `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	DynastyRoot []byte `protobuf:"bytes,3,opt,name=dynasty_root,json=dynastyRoot,proto3" json:"dynasty_root,omitempty"`
}

func (m *ConsensusRoot) Reset() { *m = ConsensusRoot{} }
func (m *ConsensusRoot) String() string {
	if b, err := m.Marshal(); err == nil {
		if b == nil {
			return string("nil")
		}
		return string(b)
	}
	return string("error")
}
func (*ConsensusRoot) ProtoMessage() {}

func (m *ConsensusRoot) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ConsensusRoot) GetProposer() []byte {
	if m != nil {
		return m.Proposer
	}
	return nil
}

func (m *ConsensusRoot) GetDynastyRoot() []byte {
	if m != nil {
		return m.DynastyRoot
	}
	return nil
}

func (m *ConsensusRoot) Marshal() (dAtA []byte, err error) {
	if m == nil {
		return nil, ErrNilState
	}
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusRoot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintState(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Proposer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintState(dAtA, i, uint64(len(m.Proposer)))
		i += copy(dAtA[i:], m.Proposer)
	}
	if len(m.DynastyRoot) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintState(dAtA, i, uint64(len(m.DynastyRoot)))
		i += copy(dAtA[i:], m.DynastyRoot)
	}
	return i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConsensusRoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovState(uint64(m.Timestamp))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.DynastyRoot)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func sovState(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConsensusRoot) Unmarshal(dAtA []byte) error {
	l := uint32(len(dAtA))
	iNdEx := uint32(0)
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := uint32(wire >> 3)
		wireType := uint32(wire & 0x7)
		_ = wireType
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynastyRoot", wireType)
			}
			var byteLen uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynastyRoot = append(m.DynastyRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.DynastyRoot == nil {
				m.DynastyRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			return fmt.Errorf("proto: invalid data ")
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

var (
	ErrInvalidLengthState = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState   = fmt.Errorf("proto: integer overflow")
	ErrNilState           = fmt.Errorf("proto: can not deal with nil data")
)
